#library "CRACK"
#include "zcommon.acs"

script "ourch" (void)
{
	GiveInventory("Ouchies", 1);
	Delay(10);
	TakeInventory("Ouchies", 1);
}
script "helmquake" (void)
{
	GiveInventory("HelmShaker", 1);
	GiveInventory("OuchMore", 1);
	Delay(10);
	TakeInventory("HelmShaker", 1);
	Delay(25);
	TakeInventory("OuchMore", 1);
}
// The stinky codes below are for compatibility with other mods
// ZScript gets mad if you try to check for an actor that doesn't exist,
// so this serves as a buffer 
script "IGotNades" ENTER	
{
	if (CheckClass("HandGrenades") && CheckClass("GrenadeAmmo"))		//do we have BDv22's grenade swep (or one with the same name)?
    {
		GiveInventory("IGotNades", 1);
		if(CheckInventory("DummyGrenadeAmmo") > CheckInventory("GrenadeAmmo"))
		{
			TakeInventory("DummyGrenadeAmmo", 1);
		}
		else if(CheckInventory("DummyGrenadeAmmo") < CheckInventory("GrenadeAmmo"))
		{
			GiveInventory("DummyGrenadeAmmo", 1);
		}
		Delay(1);
		restart;		// this probably isn't a good idea...
    }
}
script "Staminas" ENTER
{
	if (CheckClass("IsTacticalClass"))		//are we playing a mod with BD's tactical class?
	{
		if(CheckInventory("IsTacticalClass"))	// are we tactical?
		{
			GiveInventory("ITactic", 1);
			if(CheckInventory("DummyStamina") > CheckInventory("UsedStamina"))
			{
				TakeInventory("DummyStamina", 1);
			}
			else if(CheckInventory("DummyStamina") < CheckInventory("UsedStamina"))
			{
				GiveInventory("DummyStamina", 1);
			}
		Delay(1);
		restart;
		}
	}
}

script "DeathShit" DEATH
{
	log(s:"User vital signs lost");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(1,3));
	log(s:"Administering emergency medical treatment");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(10,15));
	log(s:"drawHud(8): int HealthPoints out of expected bounds!");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(5,15));
	log(s:"drawHud(8): Division by zero encountered.");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(3,10));
	log(s:"drawHud(8): Processing could not continue.");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(1,3));
	log(s:"ERROR: PROCESS drawHUD(8) STOPPED");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(1,5));
	log(s:"RESTARTING PROCESS drawHUD");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(5,10));
	log(s:"WARNING: DAMAGE TO POWER CELL #0 DETECTED");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(1,5));
	log(s:"WARNING: LOW VOLTAGE DETECTED");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(2,8));
	log(s:"drawHud(4): Initializing...");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(3,6));
	log(s:"I/O failure: could not establish link to VIT_LSCN(port 42)");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(4,12));
	log(s:"UAConfig message: Network failure detected. Cloud settings could not be downloaded.");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(5,15));
	log(s:"shieldMan(12): Init successful");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(1,3));
	log(s:"dispMan(17): no response detected");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(1,3));
	log(s:"msgMan(18): unexpected response \"0817U4RY\"");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(1,5));
	log(s:"repMan(20): critical damage to visor detected, unable to repair");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(1,5));
	log(s:"WARNING: POWER CELL #0 NOT RESPONDING");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(1,5));
	log(s:"WARNING: POWER LEVELS CRITICAL");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(1,2));
	log(s:"WARNING: RAM BANK #0 NOT RESPONDING");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(1,5));
	log(s:"WARNING: RAM BANK #1 FAILURE");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(1,3));
	log(s:"POWER FAILURE!");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(1,2));
	log(s:"ERROR: OUT OF MEMORY EXCEPTION");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(1,2));
	log(s:"Process abort: execution could not continue.");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(1,5));
	log(s:"Initiating diagnostic...");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(1,4));
	log(s:"POWER FAILURE!");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(1,5));
	log(s:"POWER FAILURE!");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(random(1,5));
	log(s:"I WILL NOT BE DESTROYED!!!");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(5);
/*
	log(s:"I WILL NOT BE DESTROYED!!");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(3);
	log(s:"I WILL NOT BE DESTROYED!");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(2);
*/
	log(s:"I WILL NOT BE DESTROYED");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(4);
	log(s:"I WILL NOT BE");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(3);
	log(s:"I WILL NOT");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(4);
	log(s:"I WILL");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	Delay(5);
	log(s:"I");
	PlaySound(0,"logmessage", CHAN_AUTO, 0.2);
	 Delay(1);
	if(!(GetCVar("helm_customlog")))
	{
		log(s:"");
		Delay(1);
		log(s:"");
		Delay(1);
		log(s:"");
		Delay(1);
		log(s:"");
		Delay(1);
	}
}
