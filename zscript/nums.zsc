extend class Helmeter
{
	string Garbage1;
	string Garbage2;
	string Garbage3;
	int Startuper;
	int StartupDelayAmount;
	bool StartedUpOut;
	bool StartSpamStopper;
	static const String StartupSequenceText[] =
	{
			"UAC OFFENSIVE HELMET OS v0.7a ONLINE",
			"Copyright(C) 2025-2032 Union Aerospace Corporation. All rights reserved.",
			"BEGIN STARTUP SEQUENCE...",
			" ",
			"Augumented reality display INITIALIZED",
			"Holographic information panels INTITIALIZED",
			"Vital link INITIALIZED",
			"Shield system ACTIVE",
			"Ammunition monitor INITIALIZED",
			"Repair nexus ACTIVE",
			"Area scanner ENABLED",
			"UACNet warning: Network not found. Please contact UAC for support.",
			"Item acquisition messages ENABLED",
			" ",
			"UOH-OS: Init successful. Have a nice day :)",
			" "
	};
	static const String LoadBar[] =
	{
			"[#__________________________]",
			"[##_________________________]",
			"[#####______________________]",
			"[######_____________________]",
			"[#######____________________]",
			"[#########__________________]",
			"[############_______________]",
			"[#############______________]",
			"[#############______________]",
			"[##############_____________]",
			"[#################__________]",
			"[##################_________]",
			"[#####################______]",
			"[#######################____]",
			"[##########################_]",
			"[###########################]",
			"[###########################]"
	};
	void DoARThings()
	{
		if(!CheckInventory("StartupCompleted", 1))
		{
			DrawImage("STRTVR", (GlassX,GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, (1.0 - ((StartupTics + 10.0) * 0.01)), (-1, -1), (2, ((100 - (StartupTics + 5)) * 0.1)), STYLE_Subtract);
			DrawImage("STRTVR", (GlassX,GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, (clamp((1.0 - ((StartupTics + 30) * 0.05)), 0.0, 1.0)), (-1, -1), (2, (exp(((StartupTics + 50.0) * 0.1)) * 0.1)), STYLE_Translucent);
			DrawImage("STRTVR3", (GlassX,GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, (1.0 - ((StartupTics + 50) * 0.1)), (-1, -1), (2, 2), STYLE_Translucent);
		}
	}
	// WARNING: TERRIBLE, VILE, DESPICABLE, REPUGNANT, ABYSMAL, HORRENDOUS, REPULSIVE, DOGSHIT CODE AHEAD 
	void DoStartupSequence()
	{
		switch(Startuper)
		{
			case 0:
			StartupDelayAmount = 5;
			break;
			case 1:
			StartupDelayAmount = 7;
			break;
			case 2:
			StartupDelayAmount = 5;
			break;
			case 3:
			StartupDelayAmount = 3;
			break;
			case 4:
			StartupDelayAmount = 23;
			break;
			case 5:
			StartupDelayAmount = 22;
			break;
			case 6:
			StartupDelayAmount = 25;
			EventHandler.SendNetworkEvent("gimmethe:VitalsOn");
			if(!StartSpamStopper)
			{
				S_StartSound("VBEEP2", CHAN_7, 0, 0.8);
				StartSpamStopper = true;
			}
//			VitalsOn = true;
			break;
			case 7:
			StartupDelayAmount = 23;
			StartSpamStopper = false;
			break;
			case 8:
			StartupDelayAmount = 21;
			break;
			case 9:
			StartupDelayAmount = 20;
			EventHandler.SendNetworkEvent("gimmethe:AmmoOn");
			if(!StartSpamStopper)
			{
				S_StartSound("VBEEP3", CHAN_7, 0, 0.8);
				StartSpamStopper = true;
			}			break;
			case 10:
			StartupDelayAmount = 20;
			StartSpamStopper = false;
			break;
			case 11:
			StartupDelayAmount = 16;
			EventHandler.SendNetworkEvent("gimmethe:StatsOn");
			if(!StartSpamStopper)
			{
				S_StartSound("VBEEP1", CHAN_7, 0, 0.8);
				StartSpamStopper = true;
			}			
			break;
			case 12:
			StartSpamStopper = false;
			EventHandler.SendNetworkEvent("gimmethe:MessageOn");
			break;
			case 13:
			StartSpamStopper = false;
			break;

		}	
		StartupTextFade = (StartextFadeInterp.GetValue() / 200.0) * DisplayFlicker;
		if(!CheckInventory("StartupCompleted", 1))
		{
			if(StartupTics == -69)
			{
				S_StartSound("HDDSTRT", CHAN_AUTO, 0, 0.8);
			}
			if(StartupTics == -49)
			{
				S_StartSound("DSPON", CHAN_AUTO, 0, 0.9);
			}
		}
		
		if(StartupTics < 0)
		{
			StartupTics++;
		}
		else
		{
			if(!CheckInventory("StartupCompleted", 1))
			{
	//			DrawImage("STRTVR", (GlassX,GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, (100 - StartupTics), (-1, -1), (1, ((100 - StartupTics) * 0.1)), STYLE_Subtract);
				StartupTics++;
				if(Startuper < StartupSequenceText.Size())
				{
					StartedUp = false;
					if(StartupTics % StartupDelayAmount == 0)
					{
						Startuper++;
						S_StartSound("logmessage", CHAN_AUTO, 0, 0.2);
					}
				}
				else
				{
					StartedUp = true;
				}
				int StartupSpace;
				DrawString(enlFont, LoadBar[Startuper], (TopX + 20, TopY + 10), DI_TEXT_ALIGN_LEFT | DI_SCREEN_LEFT_TOP, Font.CR_GREY, Alpha: StartupTextFade);
				for(int k = 0; k < Startuper; k++)
				{
					DrawString(enlFont, StartupSequenceText[k], (TopX + 20, StartupSpace + (TopY + 30)), DI_TEXT_ALIGN_LEFT | DI_SCREEN_LEFT_TOP, Font.CR_GREY, Alpha: StartupTextFade);
					StartupSpace += 10;
				}
			}
		}
		if(StartedUp)
		{
			if(StartupTextFade >= 0.01)
			{
				StartextFadeInterp.Update(0);
			}
			else if (!CheckInventory("StartupCompleted", 1))
			{
				EventHandler.SendNetworkEvent("gimmethe:StartupCompleted");
			}
		}
		
	}		
	// No, this doesn't get any better either. I should never be allowed to code again...
	
	void DoGarbage()		// Generates the random strings that appear when the numbers glitch out. It's meant to look like it's outputting garbage data
	{
		if(CorruptNum == true)
		{
			switch(random(1,18))
			{
				case 1:
				Garbage1 = "1";
				break;
				case 2:
				Garbage1 = "2";
				break;
				case 3:
				Garbage1 = "3";
				break;
				case 4:
				Garbage1 = "4";
				break;
				case 5:
				Garbage1 = "5";
				break;
				case 6:
				Garbage1 = "6";
				break;
				case 7:
				Garbage1 = "7";
				break;
				case 8:
				Garbage1 = "8";
				break;
				case 9:
				Garbage1 = "9";
				break;
				case 10:
				Garbage1 = "0";
				break;
				case 11:
				Garbage1 = "P";
				break;
				case 12:
				Garbage1 = "@";
				break;
				case 13:
				Garbage1 = "O";
				break;
				case 14:
				Garbage1 = "C";
				break;
				case 15:
				Garbage1 = "a";
				break;
				case 16:
				Garbage1 = "=";
				break;
				case 17:
				Garbage1 = "F";
				break;
				case 18:
				Garbage1 = "\"";
				break;
			}
			switch(random(1,18))
			{
				case 1:
				Garbage2 = "1";
				break;
				case 2:
				Garbage2 = "2";
				break;
				case 3:
				Garbage2 = "3";
				break;
				case 4:
				Garbage2 = "4";
				break;
				case 5:
				Garbage2 = "5";
				break;
				case 6:
				Garbage2 = "6";
				break;
				case 7:
				Garbage2 = "7";
				break;
				case 8:
				Garbage2 = "8";
				break;
				case 9:
				Garbage2 = "9";
				break;
				case 10:
				Garbage2 = "0";
				break;
				case 11:
				Garbage2 = "K";
				break;
				case 12:
				Garbage2 = "@";
				break;
				case 13:
				Garbage2 = "r";
				break;
				case 14:
				Garbage2 = "R";
				break;
				case 15:
				Garbage2 = "d";
				break;
				case 16:
				Garbage2 = "=";
				break;
				case 17:
				Garbage2 = "O";
				break;
				case 18:
				Garbage2 = "\"";
				break;
			}
			switch(random(1,18))
			{
				case 1:
				Garbage3 = "1";
				break;
				case 2:
				Garbage3 = "2";
				break;
				case 3:
				Garbage3 = "3";
				break;
				case 4:
				Garbage3 = "4";
				break;
				case 5:
				Garbage3 = "5";
				break;
				case 6:
				Garbage3 = "6";
				break;
				case 7:
				Garbage3 = "7";
				break;
				case 8:
				Garbage3 = "8";
				break;
				case 9:
				Garbage3 = "9";
				break;
				case 10:
				Garbage3 = "0";
				break;
				case 11:
				Garbage3 = "E";
				break;
				case 12:
				Garbage3 = "@";
				break;
				case 13:
				Garbage3 = "P";
				break;
				case 14:
				Garbage3 = "X";
				break;
				case 15:
				Garbage3 = "h";
				break;
				case 16:
				Garbage3 = "=";
				break;
				case 17:
				Garbage3 = "F";
				break;
				case 18:
				Garbage3 = "\"";
				break;
			}
		}
	}
}