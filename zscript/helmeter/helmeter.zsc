class PainHandler : EventHandler
{
//	bool Ouchies;
//	override void WorldLoaded(WorldEvent e)
//	{
//		Ouchies = false;
//		e.thing.A_TakeInventory("Ouchies", 1);
//	}
	int NumCracks;
/*
	override void WorldLoaded(WorldEvent e)
	{
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (PlayerInGame[i] && players[i].mo)
			{
				
			}
		}
*/
	override void WorldThingDamaged(WorldEvent e)
	{
		if (e.thing && e.thing is "PlayerPawn")
		{
			if ((e.DamageFlags == DMG_EXPLOSION && e.Damage > 5) || e.Damage >= 21)
			{
//				e.thing.A_GiveInventory("CrackNumber", 1);
				EventHandler.SendInterfaceEvent(e.thing.PlayerNumber(), "HUDEVENT_PlayerDamaged");
//				e.thing.A_PlaySound("visorcrack", CHAN_AUTO, 0.8 * Clamp(Cvar.GetCVar("helm_volume").GetFloat(), 0, 1));
				if(NumCracks < 5)
				{
					NumCracks++;
				}
				e.thing.ACS_NamedExecute("helmquake", 0, 0, 0, 0);				// I know this could be better done but whatever
			}														// at least it's better than UDV using like 8000 ACS scripts
			else if (e.thing.health <= 0)
			{
//				e.thing.A_PlaySound("visorcrack", CHAN_AUTO, 0.8 * Clamp(Cvar.GetCVar("helm_volume").GetFloat(), 0, 1));
				e.thing.ACS_NamedExecute("helmquake", 0, 0, 0, 0);				// I know this could be better done but whatever
			}
			else
			{
			e.thing.ACS_NamedExecute("ourch", 0, 0, 0, 0);	
			}
//			e.thing.A_GiveInventory("Ouchies", 1);
//			e.thing.A_TakeInventory("Ouchies", 1);
		}
	}
	override void NetworkProcess (ConsoleEvent e)
	{
		// Make sure "giveitem" is a part of the event's name:
		if (e.name.IndexOf("ClearCrack") >= 0)
		{
			NumCracks = 0;
		}
	}
	override void InterfaceProcess(ConsoleEvent e)
    {
        // Detect when the above mentioned interface event
        // is triggered:
        if (e.name ~== "HUDEVENT_PlayerDamaged")
        {
            // Cast the current statusbar as our custom HUD:
            let hud = Helmeter(statusbar);
            if (hud)
            {
                // If the cast suceeded, call the custom PlayerDamaged
                // function, and pass the first argument of the interface
                // event (which is supposed to contain the amount of damage)
                // to its argument:
                hud.PlayerDamaged();
            }
			//let CrackOutChecker = Helmeter(CrackAlpha);
			//if(CrackOutChecker)
			//{
			//	NumCracks = 0;
			//}	
        }
    }
//	override void WorldThingDied(WorldEvent e)
//	{
//		if (e.thing && e.thing is "PlayerPawn")
//		{
//			e.thing.A_GiveInventory("DeadCrack");
//		}
//	}	
}

//This code is ripped from the ZDoom Wiki, but that's what it's there for, right?
class StartupEventHandler : EventHandler
{
	override void NetworkProcess (ConsoleEvent e)
	{
		// Make sure "giveitem" is a part of the event's name:
		if (e.name.IndexOf("gimmethe") >= 0)
		{
			// Don't process the event if:
			// - it was called from the console manually
			// - this player isn't in the game for some reason
			// - this player doesn't have a PlayerPawn attached:
			if (e.IsManual || !PlayerInGame[e.Player] || !(players[e.Player].mo))
			{
				return;
			}

			let ppawn = players [e.Player].mo;
			Array<string> command;
			e.Name.Split (command, ":");

			if(command.Size() == 2)
			{
				// Cast the part of the event's name after ":"
				// as an Inventory class:
				class<Inventory> cls = command[1];
				// If that class exists, give the player this item:
				if (cls)
				{
					ppawn.GiveInventory (cls, 1);
				}
			}
		}
	}
}
	
class Helmeter : BaseStatusBar
{
		double HelmetPosX;
		double HelmetPosY;
		double BLCX;
		double BLCY;
		double BRCX;
		double BRCY;
		double TopX;
		double TopY;
		double HelmBLCX;
		double HelmBLCY;
		double HelmBRCX;
		double HelmBRCY;
		double HelmTopX;
		double HelmTopY;
		double GlassX;
		double GlassY;
		double TrueGlassX;
		double TrueGlassY;
		double ShakeOffsetX;
		int statoffset;
		double ShakeOffsetY;
		int FlickerTics;
		double HelmLightLevel;
		double HelmetAlpha;
		int CrackCount;
		bool VitalsOn;
//		double Crack1Alpha;
//		double Crack2Alpha;
//		DynamicValueInterpolator OffsetXInterp;
//		DynamicValueInterpolator OffsetYInterp;
		DynamicValueInterpolator HelmLightOutInterp;
		LinearValueInterpolator CrackAlphaInterp;
		double CrackAlpha;
		double CrackCVarAlpha;
		double HelmLightOut;
//		double 
		bool Hurting;
		int ArmorColor;
		int FaultySpamTics;
//		double TrueBLCX;
//		double TrueBLCY;
//		double TrueBRCX;
//		double TrueBRCY;
//		double TrueTopX;
//		double TrueTopY;
		int ArmorProtection;
		int ArmorValue;
		int HealthPoints;
		int HPCol;
		int APCol;
		int AmmoLightStyle;
		int resLight;
		double msgscl;
		int priLight;
		bool locks[6];
		bool CorruptDisp;
		bool CorruptNum;
//		bool randomcorrupt;
		int randomcorrupt;
		int HurtLevel;
		int StartupTics;
		int DeathTics;
		bool StartedUp;
		double BloodAlpha;
		int i;
		String image;
		double HealthIconAlpha;
		double OverhealthAlpha;
		double ArmorIconAlpha;
		double MegaArmorAlpha;
//		int MaxHP;
		double DisplayFlicker;
		double HudBackAlpha;
		bool IsDead;
		double HelmLightFlicker;
		double HLFlickerTrue;
		double HLFlickerAlt;
		bool AmmoExtra1;
		int AmmoExtra2;
		HUDFont mIndexFont;
		HUDFont mHudFont;
		HUDFont mHudFontMono;
		HUDFont enlFont;
		HUDFont statRepSmall;
		Inventory ammotype1, ammotype2;
		DynamicValueInterpolator WarnFlashInterp;
		DynamicValueInterpolator HPInterp;
		DynamicValueInterpolator APInterp;
		double StartupTextFade;
		DynamicValueInterpolator StartextFadeInterp;
		double WarnFlash;
		const PICKUPMSG_SCROLLTIME = 15; //when new messages are added, the list will scroll for this many tics
		array<String> pickupMsgStrings; //this will contain every message as it's received
		array<double> pickupMsgAlpha; //this will track the alpha value for each message to fade them out
		double pickupMsgScrollTics; //this timer will be updated as new messages appear
		int flcval1;
		int flcval2;
		int flcval3;
		int flcval4;
		DynamicValueInterpolator DynSwayX;
		DynamicValueInterpolator DynSwayY;
		double PrevPitch;
		double PrevSway;
		double PrevAngle;
		double PrevZ;
		double OldSwayOffX;
		double OldSwayOffY;
		double BobAmount;
		double SpeedAmount;
		Vector2 relVel;
		DynamicValueInterpolator DynFallAnim;
		double SwayParallax;
		int DamageAnimTics;
		int OuchCanceller;
		int DamageColor;
		Color DamageColor2;
		int MinRepairAmount;
		double SFXVolume;
		string BlankChar;
		Color dispCol;
//		double ForwardSpeed;
//		vector2 speedRel;
//		int Garbage2;
//		int Garbage3;
		
    override void Init()
    {
		Super.Init();
		HelmetPosX = 0;
		HelmetPosY = 0;
		BLCX = 0;
		BLCY = 0;
		BRCX = 0;
		BRCY = 0;
		TopX = 0;
		TopY = 0;
		GlassX = 0;
		GlassY = 0;
		ShakeOffsetX = 0;
		ShakeOffsetY = 0;
		msgscl = 0.75;
		Hurting = false;
		StartupTics = -75;
		IsDead = false;
		DeathTics = 1;
//		TrueBLCX = 0;
//		TrueBLCY = 0;
//		TrueBRCX = 0;
//		TrueBRCY = 0;
//		TrueTopX = 0;
//		TrueTopY = 0;
		ArmorValue = 0;
		FlickerTics = 100;
		OverhealthAlpha = 0;
		DisplayFlicker = 1.0;
		HelmLightFlicker = 1.0;
		HelmLightOutInterp = DynamicValueInterpolator.Create(100, 0.05, 1, 10);
		StartextFadeInterp = DynamicValueInterpolator.Create(200, 0.1, 1, 20);
		HelmLightOut = 0;
//		int maxHP = CPlayer.mo.GetMaxHealth(true);
		HealthPoints = 100;
//		Crack1Alpha = 1.0;
//		Crack2Alpha = 1.0;
//		CrackCount = 5;
		CrackCvarAlpha = 1;
		CrackAlphaInterp = LinearValueInterpolator.Create(100, 1);
		CrackAlpha = 1;
		WarnFlashInterp = DynamicValueInterpolator.Create(80, 0.1, 1, 10);
		WarnFlash = 1.0;
		AmmoExtra1 = false;
		FaultySpamTics = 0;
		HelmLightLevel = 1.0;
		AmmoExtra2 = 0;
		HurtLevel = 0;
		BloodAlpha = 0.75;
		HPInterp = DynamicValueInterpolator.Create(500, 0.1, 1, 50);
		APInterp = DynamicValueInterpolator.Create(500, 0.1, 1, 50);
		Font fnt = "04FONT"; //obtain the font named "MYHUDFNT"
        mIndexFont = HUDFont.Create(fnt);
		Font fnt2 = "04FONTOL"; //obtain the font named "MYHUDFNT"
        mHudFont = HUDFont.Create(fnt2);
		mHudFontMono = HUDFont.Create(fnt2, fnt2.GetCharWidth("0"), Mono_CellRight);
		Font fnt3 = "cyberfnt"; //obtain the font named "MYHUDFNT"
        enlFont = HUDFont.Create(fnt3);
		Font fnt4 = "STRPSML"; //obtain the font named "MYHUDFNT"
        statRepSmall = HUDFont.Create(fnt4);
//		Font fnt4 = "BOLO"; //obtain the font named "MYHUDFNT"
 //       enlFont = HUDFont.Create(fnt4);
//		OffsetXInterp;
//		random(85,100) && FlickerTics > random(60,75)) || (FlickerTics < random(40,60) && FlickerTics > random(20,40)))
		flcval1 = random(81,99);
		flcval2 = random(61,80);
		flcval3 = random(51,60);
		flcval4 = random(40,50);
		CorruptDisp = false;
		CorruptNum = false;
		DamageColor2 = Color(255, 0, 0, 0);
		DynSwayX = DynamicValueInterpolator.Create(0, 0.25, 1, 50);
		DynSwayY = DynamicValueInterpolator.Create(0, 0.25, 1, 50);
		DynFallAnim = DynamicValueInterpolator.Create(0, 0.75, 1, 300);
		DamageAnimTics = 0;
    }

    override void Draw(int state, double ticFrac)
    {
		super.Draw(state, TicFrac);

		if (state == HUD_None)
		{
			return;
		}

		if (state == HUD_StatusBar)
		{
			BeginHud();					// IDK what this actually does, but you need it
			if(!CheckInventory("HLM_InThirdPerson", 1)) // Don't draw these if in third person
			{
				DoARThings();				// Handles the screen overlay stuff during the bootup and death sequences.
				DrawFullscreenStuff();		// Handles the helmet and visor effects.
			}
			if(!(CheckInventory("HLM_InThirdPerson", 1) && Cvar.GetCVar("helm_hidetp", CPlayer).GetInt())) // Also don't draw these if the config is set
			{
				DrawCustomPickupMessage((TopX, TopY + statoffset), DI_SCREEN_CENTER_TOP | DI_TEXT_ALIGN_CENTER, msgscl);	// Handles the custom status messages.
				DrawHudLights();
				DrawHudNumberStuff();		// Handles the actual displays; the HUD part of this HUD.
				DoStartupSequence();		// Handles the startup sequence text. Vile code lies here.
				DoDeathSequence();			// Similar to the startup sequence. Less vile, but still not pretty.
			}
			// A couple more functions are called in Tick() too
		}
		if (state == HUD_Fullscreen)
		{
			BeginHud();
			if(!CheckInventory("HLM_InThirdPerson", 1))
			{
				DoARThings();	
			}
			if(!(CheckInventory("HLM_InThirdPerson", 1) && Cvar.GetCVar("helm_hidetp", CPlayer).GetInt())) // Also don't draw these if the config is set
			{
				DrawCustomPickupMessage((TopX, TopY + statoffset), DI_SCREEN_CENTER_TOP | DI_TEXT_ALIGN_CENTER, msgscl);
				DrawHudLights();
				DrawHudNumberStuff();
				DoStartupSequence();
				DoDeathSequence();		
			}
//			DrawMinmodeHudStuff();
		}		
		
    }
	void PlayerDamaged()
	{
		CrackAlphaInterp.Reset(100);
		CrackAlpha = 1;
		S_StartSound("visorcrack", CHAN_AUTO, 0, 0.8 * SFXVolume);
//		if(CrackCount < 4)
//		{
//			CrackCount++;
//		}
//		CPlayer.GiveInventory("CrackNumber");
//		CPlayer.ACS_NamedExecute("YesThisWorks", 0, 0, 0, 0);
	}

	void DrawFullscreenStuff()
	{
//		DrawString(enlFont, FormatNumber(BobAmount, 1, 4), (TopX - 1, TopY + 59), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);
//		DrawString(enlFont, FormatNumber(SpeedAmount, 1, 4), (TopX - 1, TopY + 69), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);		
//		DrawString(enlFont, FormatNumber((sin(SpeedAmount + BobAmount) * 50), 1, 4), (TopX - 1, TopY + 79), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);		
/*
		DrawString(enlFont, FormatNumber(SwayOffX * 100, 1, 4), (TopX - 1, TopY + 59), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);		
		DrawString(enlFont, FormatNumber(SwayOffY * 100, 1, 4), (TopX - 1, TopY + 69), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);		
		DrawString(enlFont, FormatNumber(relVel.X, 1, 4), (TopX - 1, TopY + 79), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);		
		DrawString(enlFont, FormatNumber(relVel.Y, 1, 4), (TopX - 1, TopY + 89), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);		
*/
//		int testInt = randompick(34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 64, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102);
//		DrawString(mHudFont, String.Format("%c",testInt)..String.Format("%c",testInt), (TopX - 1, TopY + 59), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);		
//		DrawString(enlFont, "Dynamic, Reactive Visor HUD", (TopX - 1, TopY + 59), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);		
		if(CPlayer.Health <= 0)
		{
			DrawImage("VSRDCRK", (GlassX,GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, 1.0);
		}
		if(Cvar.GetCVar("helm_showcracks", CPlayer).GetInt())
		{
			let event = PainHandler(EventHandler.Find("PainHandler"));
				if (event) //null-check the cast
				{
					CrackCount = event.NumCracks;
				}
			MinRepairAmount = Cvar.GetCVar("helm_minrepair", CPlayer).GetInt();
			if (CrackCount >= 1)// && CPlayer.Health >= 1)
			{
				
				CrackCVarAlpha = CrackAlpha * Clamp(Cvar.GetCVar("helm_crackalpha", CPlayer).GetFloat(), 0, 1);
				if(CrackCVarAlpha ~== 0)
				{
					CrackCount = 0;
					EventHandler.SendNetworkEvent("ClearCrack");
				}
				
				switch (CrackCount)
				{
				case 5:
					DrawImage("VSRCRK10", (GlassX, GlassY), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, CrackCvarAlpha);
				case 4:
					DrawImage("VSRCRK1", (GlassX - 50, GlassY + 50), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, CrackCvarAlpha);
				case 3:
					DrawImage("VSRCRK4", (GlassX + 100,GlassY - 100), DI_SCREEN_RIGHT_TOP | DI_ITEM_RIGHT_TOP, CrackCVarAlpha);
				case 2:
					DrawImage("VSRCRK2", (GlassX + 40,GlassY + 80), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT_BOTTOM, CrackCVarAlpha);
				case 1:
					DrawImage("VSRCRK7", (GlassX, GlassY), DI_SCREEN_LEFT_TOP | DI_ITEM_LEFT_TOP, CrackCVarAlpha);
				case 0:
					break;
				}
				/*
				DrawImage("VSRCRK7", (GlassX, GlassY), DI_SCREEN_LEFT_TOP | DI_ITEM_LEFT_TOP, CrackCVarAlpha);
				if (CrackCount >= 4)
				{
					DrawImage("VSRCRK1", (GlassX - 50, GlassY + 50), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, CrackCvarAlpha);
					//DrawImage("VSRCRK3", (GlassX - 20,GlassY), DI_SCREEN_CENTER_BOTTOM | DI_ITEM_CENTER, CrackCvarAlpha);
				} 
				if (CrackCount >= 3)
				{
					DrawImage("VSRCRK4", (GlassX + 100,GlassY - 80), DI_SCREEN_RIGHT_TOP | DI_ITEM_RIGHT_TOP, CrackCVarAlpha);
				} 
				if (CrackCount >= 2)	
				{		//This one is drawn after the others so if they overlap it doesn't look as bad
					DrawImage("VSRCRK2", (GlassX + 10,GlassY + 50), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT_BOTTOM, CrackCVarAlpha);
				} 
				*/

			}
		}
//		if (CheckInventory("CrackNumber", 1))
//		{
//			DrawImage("VSRCRK1", (GlassX,GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, Crack1Alpha);
//			if (CheckInventory("CrackNumber", 2))
//			{
//				DrawImage("VSRCRK2", (GlassX,GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, Crack2Alpha);
//			} 
//		}
/*
		if(Cvar.GetCVar("helm_showdisplay", CPlayer).GetInt())
		{
			if (CrackCount >= 1 && ArmorValue <= 5)
			{
				DrawString(mIndexFont, "INSUFFICIENT ARMOR TO REPAIR DAMAGE", (TopX, TopY + 15), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_RED, Alpha: DisplayFlicker, scale: (0.75, 0.75));
			}
		}
*/
		if(ArmorValue > 200)
		{
			ArmorColor = 7;
		}
		else
		{
			ArmorColor = ((ArmorValue - 1) / 25);
		}
		switch (ArmorColor)
		{
			case 0:
			DamageColor = "A";
			DamageColor2 = Color(255, 192, 64, 75);
			break;
			case 1:
			DamageColor = "B";
			DamageColor2 = Color(255, 192, 181, 64);
			break;
			case 2:
			case 3:
			DamageColor = "C";
			DamageColor2 = Color(255, 75, 192, 64);
			break;
			case 4:
			case 5:
			DamageColor = "D";
			DamageColor2 = Color(255, 64, 192, 117);
			break;
			case 6:
			case 7:
			DamageColor = "E";
			DamageColor2 = Color(255, 64, 192, 181);
			break;
		}

		HelmetAlpha = Clamp(Cvar.GetCVar("helm_helmetalpha", CPlayer).GetFloat(), 0, 1);
		HLFlickerAlt = Clamp(Cvar.GetCVar("helm_armoranimalpha", CPlayer).GetFloat(), 0, 1);
		HLFlickerTrue = HelmLightFlicker * Clamp(Cvar.GetCVar("helm_armoralpha", CPlayer).GetFloat(), 0, 1);
		if((DamageAnimTics != 0 && ArmorValue >= 1) && Cvar.GetCVar("helm_armoranim", CPlayer).GetInt())
		{
			String DamageAnimPlaceBot = "VLLDMG";
			String DamageAnimPlaceTop = "VLTDMG";

			DamageAnimPlaceBot.AppendCharacter(DamageAnimTics + 48);
			DamageAnimPlaceTop.AppendCharacter(DamageAnimTics + 48);
		
			DrawImage(DamageAnimPlaceBot, (HelmBLCX - 10, HelmBLCY + 10), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HLFlickerAlt, (-1, -1), (1,1), STYLE_Add, DamageColor2);
			DrawImage(DamageAnimPlaceBot, (HelmBRCX + 10, HelmBRCY + 10), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM | DI_MIRROR, HLFlickerAlt, (-1, -1), (1, 1), STYLE_Add, DamageColor2);
			DrawImage(DamageAnimPlaceTop, (HelmTopX, HelmTopY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HLFlickerAlt, (-1, -1), (1,1), STYLE_Add, DamageColor2);			

		}
		if ((ArmorValue >= 1 && HealthPoints >= 1) && Cvar.GetCVar("helm_armoridle", CPlayer).GetInt())
		{
			DrawImage("VLLAN101", (HelmBLCX - 10, HelmBLCY + 10), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HLFlickerTrue, (-1, -1), (1,1), STYLE_Add, DamageColor2);
			DrawImage("VLLAN101", (HelmBRCX + 10, HelmBRCY + 10), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM | DI_MIRROR, HLFlickerTrue, (-1, -1), (1,1), STYLE_Add, DamageColor2);
			DrawImage("VLTAN101", (HelmTopX, HelmTopY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HLFlickerAlt, (-1, -1), (1,1), STYLE_Add, DamageColor2);			
		}
		DrawImage("VSRBLC", (HelmBLCX - 10, HelmBLCY + 10), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HelmetAlpha);
		DrawImage("VSRBRC", (HelmBRCX + 10, HelmBRCY + 10), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HelmetAlpha);
		DrawImage("VSRTPC", (HelmTopX, HelmTopY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HelmetAlpha);
		if(CheckInventory("PowerInvisibility", 1))	// Make the helmet translucent if you have invisibility
		{	
			DrawImage("VSRBLB", (HelmBLCX - 10, HelmBLCY + 10), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HelmetAlpha / 3);
			DrawImage("VSRBRB", (HelmBRCX + 10, HelmBRCY + 10), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HelmetAlpha / 3);
			DrawImage("VSRTPB", (HelmTopX, HelmTopY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HelmetAlpha / 3);
		}
		else
		{
			if(Cvar.GetCVar("helm_darkness", CPlayer).GetInt())
			{
				HelmLightLevel = HelmetAlpha * (cplayer.mo.cursector.lightlevel / 255.0);		// get current sector light level
				DrawImage("VSRBLB", (HelmBLCX - 10, HelmBLCY + 10), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HelmetAlpha);
				DrawImage("VSRBRB", (HelmBRCX + 10, HelmBRCY + 10), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HelmetAlpha);
				DrawImage("VSRTPB", (HelmTopX, HelmTopY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HelmetAlpha);
				DrawImage("VSRBLA", (HelmBLCX - 10, HelmBLCY + 10), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HelmLightLevel);
				DrawImage("VSRBRA", (HelmBRCX + 10, HelmBRCY + 10), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HelmLightLevel);
				DrawImage("VSRTPA", (HelmTopX, HelmTopY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HelmLightLevel);	
			}
			else
			{
				DrawImage("VSRBLA", (HelmBLCX - 10, HelmBLCY + 10), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HelmetAlpha);
				DrawImage("VSRBRA", (HelmBRCX + 10, HelmBRCY + 10), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HelmetAlpha);
				DrawImage("VSRTPA", (HelmTopX, HelmTopY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HelmetAlpha);
			}
		}
//		if(Cvar.GetCVar("helm_projectlight", CPlayer).GetInt())
//		{
//			DrawImage("VDSPLIA", (BLCX - 1, BLCY - 18), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, DisplayFlicker);
//			DrawImage("VDSPLIA", (BRCX + 3, BRCY - 18), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, DisplayFlicker);
//		}
//		DrawString(enlFont, FormatNumber(DamageAnimTics, 1, 4), (TopX - 1, TopY + 59), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);		
//		DrawString(enlFont, DamageAnimPlaceLeft, (TopX - 1, TopY + 69), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);		

		if(ArmorValue >= 1 && Cvar.GetCVar("helm_armorlay", CPlayer).GetInt())	
		{
			String ArmorOverPlaceBot = "VSLBL";
			String ArmorOverPlaceTop = "VSLTP";
			ArmorOverPlaceBot.AppendCharacter(DamageColor);
			ArmorOverPlaceTop.AppendCharacter(DamageColor);
			
			DrawImage(ArmorOverPlaceBot, (HelmBLCX - 10, HelmBLCY + 10), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HLFlickerTrue, (-1, -1), (1,1), STYLE_Add, DamageColor2);
			DrawImage(ArmorOverPlaceBot, (HelmBRCX + 10, HelmBRCY + 10), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM | DI_MIRROR, HLFlickerTrue, (-1, -1), (1,1), STYLE_Add, DamageColor2);
			DrawImage(ArmorOverPlaceTop, (HelmTopX, HelmTopY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HLFlickerTrue, (-1, -1), (1,1), STYLE_Add, DamageColor2);

		}
		if(Cvar.GetCVar("helm_blood", CPlayer).GetInt())
		{
			HurtLevel = (HealthPoints + 15) / 15;
			BloodAlpha = Clamp(Cvar.GetCVar("helm_bloodalpha", CPlayer).GetFloat(), 0, 1);
//			DrawString(enlFont, FormatNumber(HurtLevel, 1, 4), (TopX - 1, TopY + 59), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);
			//DrawImage("VSBLD4", (GlassX + 30, GlassY - 30), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT_BOTTOM, BloodAlpha);
			switch(HurtLevel)
			{
			case 6:
				DrawImage("VSBLD6", (GlassX, GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, BloodAlpha);
				break;
			case 5:
				DrawImage("VSBLD6", (GlassX, GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, BloodAlpha);
				DrawImage("VSBLD5", (GlassX, GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, BloodAlpha);
				break;
			case 4:
				DrawImage("VSBLD6", (GlassX, GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, BloodAlpha);
				DrawImage("VSBLD5", (GlassX, GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, BloodAlpha);
				DrawImage("VSBLD3", (GlassX, GlassY - 20), DI_SCREEN_CENTER_BOTTOM | DI_ITEM_CENTER | DI_ITEM_BOTTOM, BloodAlpha);
				break;
			case 3:
				DrawImage("VSBLD6", (GlassX, GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, BloodAlpha);
				DrawImage("VSBLD5", (GlassX, GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, BloodAlpha);
				DrawImage("VSBLD3", (GlassX, GlassY - 20), DI_SCREEN_CENTER_BOTTOM | DI_ITEM_CENTER | DI_ITEM_BOTTOM, BloodAlpha);
				DrawImage("VSBLD1", (GlassX, GlassY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, BloodAlpha);
				break;
			case 2:
				DrawImage("VSBLD6", (GlassX, GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, BloodAlpha);
				DrawImage("VSBLD5", (GlassX, GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, BloodAlpha);
				DrawImage("VSBLD3", (GlassX, GlassY - 20), DI_SCREEN_CENTER_BOTTOM | DI_ITEM_CENTER | DI_ITEM_BOTTOM, BloodAlpha);
				DrawImage("VSBLD1", (GlassX, GlassY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, BloodAlpha);
				DrawImage("VSBLD4", (GlassX + 30, GlassY - 30), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT_BOTTOM, BloodAlpha);
				break;
			case 1:
				DrawImage("VSBLD6", (GlassX, GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, BloodAlpha);
				DrawImage("VSBLD5", (GlassX, GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, BloodAlpha);
				DrawImage("VSBLD3", (GlassX, GlassY - 20), DI_SCREEN_CENTER_BOTTOM | DI_ITEM_CENTER | DI_ITEM_BOTTOM, BloodAlpha);
				DrawImage("VSBLD1", (GlassX, GlassY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, BloodAlpha);
				DrawImage("VSBLD4", (GlassX + 30, GlassY - 30), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT_BOTTOM, BloodAlpha);
				DrawImage("VSBLD2", (GlassX - 20, GlassY - 30), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_BOTTOM, BloodAlpha);
				break;
			}
		}
	}
		

	override bool ProcessNotify(EPrintLevel printlevel, String outline)
	{
		if(gamestate != GS_LEVEL || consoleState == c_down) return false;		// if console is open or not in level, do not engage
		if ((printlevel >= PRINT_LOW || printlevel < PRINT_LOG) && Cvar.GetCVar("helm_customlog", CPlayer).GetInt()) // if not a pickup, death, critical, or chat message, or if this feature is disabled, stop
		{
			// When a new message appears, push it to our
			// array of strings:
			pickupMsgStrings.Push(outline);
			// We'll also push 2.0 to the alpha value for
			// this new string. We start with 2.0, so that
			// the message is printed opaque first, then
			// gradually starts fading out:
			pickupMsgAlpha.Push(2.0);
			// To be absolutely safe, make sure the two arrays
			// are of the same size:
			pickupMsgAlpha.Resize(pickupMsgStrings.Size());
			// Update the scroll timer:
			pickupMsgScrollTics = PICKUPMSG_SCROLLTIME;
			// Disable default pickup message printing:
			return true;
		}
		return false;
	}
	
	// WARNING: vile code ahead
	void DrawHudLights()
	{
		if(Cvar.GetCVar("helm_projectlight", CPlayer).GetInt() && !CheckInventory("HLM_InThirdPerson", 1))
		{
			if(CheckInventory("VitalsOn", 1))
			{
				DrawImage("VDSPLIA", (HelmBLCX - 1, HelmBLCY - 18), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, DisplayFlicker, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
			}
			if(CheckInventory("AmmoOn", 1))
			{
				DrawImage("VDSPLIA", (HelmBRCX + 3, HelmBRCY - 18), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, DisplayFlicker, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
			}
			if(CheckInventory("StatsOn", 1))
			{
				DrawImage("VDSPLIA", (HelmTopX - 98, HelmTopY - 13), DI_SCREEN_CENTER_TOP | DI_ITEM_RIGHT | DI_ITEM_TOP, DisplayFlicker, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
				DrawImage("VDSPLIA", (HelmTopX + 100, HelmTopY - 13), DI_SCREEN_CENTER_TOP | DI_ITEM_LEFT | DI_ITEM_TOP, DisplayFlicker, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
			}
			if(Cvar.GetCVar("helm_showdisplay", CPlayer).GetInt())
			{
				if(CheckInventory("VitalsOn", 1))
				{
					DrawImage("VDSPLIB", (HelmBLCX - 1, HelmBLCY - 18), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, DisplayFlicker, (-1, -1), (1,1), STYLE_Add, color(255, dispCol.r, dispCol.g, dispCol.b));
				}
				if(CheckInventory("AmmoOn", 1))
				{
					if(ammotype1 != null || ammotype2 != null) 
					{
						DrawImage("VDSPLIB", (HelmBRCX + 3, HelmBRCY - 18), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, DisplayFlicker, (-1, -1), (1,1), STYLE_Add, color(255, dispCol.r, dispCol.g, dispCol.b));
					}
					else
					{
						DrawImage("VDSPLIC", (HelmBRCX + 3, HelmBRCY - 18), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, DisplayFlicker, (-1, -1), (1,1), STYLE_Add, color(255, dispCol.r, dispCol.g, dispCol.b));
					}
				}
				if(CheckInventory("StatsOn", 1))
				{
					if(Cvar.GetCVar("helm_showstats", CPlayer).GetInt())
					{
						DrawImage("VDSPLIB", (HelmTopX - 98, HelmTopY - 13), DI_SCREEN_CENTER_TOP | DI_ITEM_RIGHT | DI_ITEM_TOP, DisplayFlicker, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
						DrawImage("VDSPLIB", (HelmTopX + 100, HelmTopY - 13), DI_SCREEN_CENTER_TOP | DI_ITEM_LEFT | DI_ITEM_TOP, DisplayFlicker, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
					}
					else
					{
						DrawImage("VDSPLIC", (HelmTopX - 98, HelmTopY - 13), DI_SCREEN_CENTER_TOP | DI_ITEM_RIGHT | DI_ITEM_TOP, DisplayFlicker, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
						DrawImage("VDSPLIC", (HelmTopX + 100, HelmTopY - 13), DI_SCREEN_CENTER_TOP | DI_ITEM_LEFT | DI_ITEM_TOP, DisplayFlicker, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
					}
				}
				if(Cvar.GetCVar("helm_projectbeam", CPlayer).GetInt())
				{
					if(CheckInventory("VitalsOn", 1))
					{
						if(Cvar.GetCVar("helm_minmode", CPlayer).GetInt())
						{
							if(Cvar.GetCVar("helm_showmugshot", CPlayer).GetInt())
							{
								DrawImage("VDSPLLH", (BLCX, BLCY), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
							}
							else
							{
								DrawImage("VDSPLLE", (BLCX, BLCY), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
							}
						}
						else
						{
							if(Cvar.GetCVar("helm_showmugshot", CPlayer).GetInt())
							{
								DrawImage("VDSPLLA", (BLCX, BLCY), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
							}
							else
							{
								DrawImage("VDSPLLB", (BLCX, BLCY), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
							}
						}
					}
		//			DrawImage("VDSPLID", (BRCX, BRCY), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, DisplayFlicker);
//					if((ammotype1 == null && ammotype2 == null) && AmmoExtra1 == true)
//					{
//						DrawImage("VDSPLRF", (BRCX, BRCY), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HudBackAlpha);
//					}
					AmmoLightStyle = (resLight + priLight) * AmmoExtra2;
					switch(AmmoLightStyle)	//This one doesn't need the check if it's on because ammo display already handles the beams visibility, so if that's not on it can't handle this
					{
					case 0:
						break;
					case 1:
						DrawImage("VDSPLRG", (BRCX, BRCY), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
						break;
					case 2:
						DrawImage("VDSPLRD", (BRCX, BRCY), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
						break;
					case 3:
						DrawImage("VDSPLRC", (BRCX, BRCY), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
						break;
					case -1:
						DrawImage("VDSPLRG", (BRCX, BRCY), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
						DrawImage("VDSPLRF", (BRCX, BRCY), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));						
						break;
					case -2:
						DrawImage("VDSPLRE", (BRCX, BRCY), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
						break;
					case -3:
						DrawImage("VDSPLRB", (BRCX, BRCY), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
						break;
					}
					if(AmmoLightStyle == 0 && AmmoExtra2 == -1)
					{
						DrawImage("VDSPLRF", (BRCX, BRCY), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));						
					}
					if(Cvar.GetCVar("helm_showstats", CPlayer).GetInt() && CheckInventory("StatsOn", 1))
					{
						DrawImage("VDSPLTA", (TopX, TopY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
					}
				}
			}
			else
			{
				if(CheckInventory("VitalsOn", 1))
				{
					DrawImage("VDSPLIC", (HelmBLCX - 1, HelmBLCY - 18), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, DisplayFlicker, (-1, -1), (1,1), STYLE_Add);
				}
				if(CheckInventory("AmmoOn", 1))
				{
					DrawImage("VDSPLIC", (HelmBRCX + 3, HelmBRCY - 18), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, DisplayFlicker, (-1, -1), (1,1), STYLE_Add);
				}
				if(CheckInventory("StatsOn", 1))
				{
					DrawImage("VDSPLIC", (HelmTopX - 98, HelmTopY - 13), DI_SCREEN_CENTER_TOP | DI_ITEM_RIGHT | DI_ITEM_TOP, DisplayFlicker);
					DrawImage("VDSPLIC", (HelmTopX + 100, HelmTopY - 13), DI_SCREEN_CENTER_TOP | DI_ITEM_LEFT | DI_ITEM_TOP, DisplayFlicker);
				}
			}
		}	
	}
	void DrawHudNumberStuff()
	{
		SwayParallax = Clamp(Cvar.GetCVar("helm_swayparallax", CPlayer).GetFloat(), 0, 1);
		HelmBLCX = BLCX * SwayParallax;
		HelmBLCY = BLCY * SwayParallax;
		HelmBRCX = BRCX * SwayParallax;
		HelmBRCY = BRCY * SwayParallax;
		HelmTopX = TopX * SwayParallax;
		HelmTopY = TopY * SwayParallax;
		GlassX = TrueGlassX * SwayParallax;
		GlassY = TrueGlassY * SwayParallax;
		dispCol = Cvar.GetCVar("helm_dispcolor", CPlayer).GetString();
/*
		switch(Cvar.GetCVar("helm_blankchar", CPlayer).GetInt())
		{
			case 0:
			BlankChar = "   ";
			break;
			case 1:
			BlankChar = "000";
			break;
			case 2:
			BlankChar = "888";
			break;
			case 3:
			BlankChar = "###";
			break;
		}
*/
		BlankChar = Cvar.GetCvar("helm_blankcharstring", CPlayer).GetString().Left(3);
		msgscl = Clamp(Cvar.GetCVar("helm_msgscl", CPlayer).GetFloat(), 0, 1);
		SFXVolume = Clamp(Cvar.GetCVar("helm_volume", CPlayer).GetFloat(), 0, 1);
		if(Cvar.GetCVar("helm_flicker", CPlayer).GetInt() && CPlayer.Health >= 1)
		{
			if(CheckInventory("Ouchies", 1))
			{
				HelmLightFlicker = frandom((ArmorValue / 200.0), 1.0);
				if(DamageAnimTics == 0)
				{
					DamageAnimTics++;
				}
			}
			else if(CheckInventory("OuchMore", 1) || randomcorrupt != 0)
			{
				HelmLightFlicker = frandom((ArmorValue / 200.0), 1.0);		//the lower armor you have, the more intense the flicker is
				DisplayFlicker = frandom(0.67, 1.0);
				if(randomcorrupt == 0 && (DamageAnimTics == 0 && OuchCanceller == 0))
				{
					DamageAnimTics++;
					OuchCanceller = 35;
				}
			}
			else
			{
				if(ArmorValue < MinRepairAmount)
				{
					HelmLightFlicker = frandom(0.75, 1.0);	
				}
				else
				{
					HelmLightFlicker = 1.0;
				}
				DisplayFlicker = 1.0;
			}
		}	
		if(CPlayer.Health <= 0)
		{
			IsDead = true;
			if(FlickerTics > 0)
			{
				if(Cvar.GetCVar("helm_flicker", CPlayer).GetInt())
				{
					HelmLightFlicker = frandom(((FlickerTics / 100.0) * 2), 1.0);
					DisplayFlicker = frandom(((FlickerTics / 100.0) * 2), 1.0);
				}
			}
			else
			{
				HelmLightOutInterp.Update(0);
	//			HelmLightOut = HelmLightOutInterp;
				if(Cvar.GetCVar("helm_flicker", CPlayer).GetInt())
				{
					HelmLightFlicker = frandom(0.0, (HelmLightOutInterp.GetValue() / 100.0));
					DisplayFlicker = frandom(0.0, (HelmLightOutInterp.GetValue() / 100.0));
				}
				else
				{
					HelmLightFlicker = HelmLightOutInterp.GetValue() / 100.0;
					DisplayFlicker = HelmLightOutInterp.GetValue() / 100.0;
				}
			}
		}
		
		if((Cvar.GetCVar("helm_corrupt", CPlayer).GetInt() && randomcorrupt != 0) || (Cvar.GetCVar("helm_corrupt", CPlayer).GetInt() && (CheckInventory("HelmShaker", 1) || ((FlickerTics < flcval1 && FlickerTics > flcval2) || (FlickerTics < flcval3 && FlickerTics > flcval4)) || FlickerTics <= 35)))	// I like BIG IF STATEMENTS, and I CANNOT LIE		
		{
			CorruptDisp = true;
		}
		else
		{
			CorruptDisp = false;
		}
		if((Cvar.GetCVar("helm_corruptnum", CPlayer).GetInt() && randomcorrupt != 0) || (Cvar.GetCVar("helm_corruptnum", CPlayer).GetInt() && (CheckInventory("HelmShaker", 1) || ((FlickerTics < flcval1 && FlickerTics > flcval2) || (FlickerTics < flcval3 && FlickerTics > flcval4)) || FlickerTics <= 35)))			
		{
			CorruptNum = true;
		}
		else
		{
			CorruptNum = false;
		}
		if(Cvar.GetCVar("helm_showdisplay", CPlayer).GetInt())
		{
			HudBackAlpha = DisplayFlicker * Clamp(Cvar.GetCVar("helm_backalpha", CPlayer).GetFloat(), 0, 1);
			if(CheckInventory("VitalsOn", 1))
			{
				if(Cvar.GetCVar("helm_showmugshot", CPlayer).GetInt())
				{
					if(CheckInventory("PowerInvisibility", 1))
					{
						DrawImage("PHINVFD1", (BLCX + 40, BLCY - 100.5), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_CENTER, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
					}
					if(CorruptDisp == true)
					{
						DrawImage("PMUGL1", (BLCX + 40, BLCY - 100.5), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_CENTER, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
					}
					else
					{
						DrawImage("PHMUGBK", (BLCX + 40, BLCY - 100.5), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_CENTER, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
					}
					DrawTexture(GetMugShot(5), (BLCX + 40, BLCY - 100.5), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_CENTER, DisplayFlicker);
					if(CheckInventory("PowerInvisibility", 1))
					{
						DrawImage("PHINVST1", (BLCX + 40, BLCY - 100.5), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_CENTER, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
						let invis = Powerup(CPlayer.mo.FindInventory("PowerInvisibility")); //cast this so it doesn't throw a fit
						DrawString(statRepSmall, "CLOAK:"..FormatNumber(invis.EffectTics / 35, 1, 3), (BLCX + 26, BLCY - 91.5), DI_TEXT_ALIGN_LEFT | DI_SCREEN_LEFT_BOTTOM, Font.CR_Ice, Alpha: DisplayFlicker); 
					}
				}
				else
				{
					if(CheckInventory("PowerInvisibility", 1))
					{
						let invis = Powerup(CPlayer.mo.FindInventory("PowerInvisibility")); //cast this so it doesn't throw a fit
						DrawString(statRepSmall, "CLK:"..FormatNumber(invis.EffectTics / 35, 1, 3), (BLCX + 66, BLCY - 91.5), DI_TEXT_ALIGN_LEFT | DI_SCREEN_LEFT_BOTTOM, Font.CR_Ice, Alpha: DisplayFlicker); 
					}
				}
				if(Cvar.GetCVar("helm_minmode", CPlayer).GetInt())
				{
					DrawMinmodeHudStuff();
				}
				else
				{
					if(HealthPoints <= 25)			// start flashing at 25%
					{
						DrawImage("PHWARNL", (BRCX + 68, BRCY - 60), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, WarnFlash);
					}
					if(CorruptDisp == true)
					{
						DrawImage("PRHCR1", (BLCX + 25, BLCY - 45), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
					}
					else
					{
						DrawImage("PHBARBKH", (BLCX + 25, BLCY - 45), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
					}
					DrawImage("HPICON", (BLCX + 49, BLCY - 71), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, HealthIconAlpha);
					if(Cvar.GetCVar("helm_showchips", CPlayer).GetInt())
					{
						DrawBar("PHBARHP5", "PHBARHP2", HPInterp.GetValue() / 5, 100, (BLCX + 43, BLCY - 57), 0, SHADER_HORZ, DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_TOP, DisplayFlicker);
					}
					DrawBar("PHBARHP", "PHBARHP2", HealthPoints, 100, (BLCX + 43, BLCY - 57), 0, SHADER_HORZ, DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_TOP, DisplayFlicker);
					if(CheckInventory("PowerStrength", 1))
					{
						DrawImage("BERZIND", (BLCX + 49, BLCY - 71), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
			//			DrawImage("PHBRZKIN", (BLCX + 30, BLCY - 45), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
					}
					if(HealthPoints >= 101)
					{
						DrawBar("PHBARHP3", "PHBARHP4", (HealthPoints - 100), 100, (BLCX + 43, BLCY - 57), 0, SHADER_VERT | SHADER_REVERSE, DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_TOP, DisplayFlicker);
						DrawImage("HPICON2", (BLCX + 49, BLCY - 71), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, OverhealthAlpha);
					}
					if(CheckInventory("PowerInvulnerable", 1))
					{
						let god = Powerup(CPlayer.mo.FindInventory("PowerInvulnerable"));
						DrawBar("PHGODHP", "PHGODEP", god.EffectTics, 1050, (BLCX + 43, BLCY - 57), 0, SHADER_HORZ, DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_TOP, DisplayFlicker);
						DrawString(statRepSmall, "GOD:"..FormatNumber(god.EffectTics/35, 1, 3), (BLCX + 44, BLCY - 56), DI_TEXT_ALIGN_LEFT | DI_SCREEN_LEFT_BOTTOM, Font.CR_Ice, Alpha:DisplayFlicker);
					}
					DrawString(mHUDFontMono, BlankChar, (BLCX + 110, BLCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_LEFT_BOTTOM, Font.CR_DarkGray, Alpha: (HudBackAlpha / 2), scale: (1.5, 1.5));		
					if(CorruptNum == true)
					{
						DrawString(mHUDFontMono, String.Format("%c",Garbage1)..String.Format("%c",Garbage2)..String.Format("%c",Garbage3), (BLCX + 110, BLCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_LEFT_BOTTOM, HPCol, Alpha: DisplayFlicker, scale: (1.5, 1.5));
					}
					else
					{
						DrawString(mHUDFontMono, FormatNumber(HealthPoints, 1, 3), (BLCX + 110, BLCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_LEFT_BOTTOM, HPCol, Alpha: DisplayFlicker, scale: (1.5, 1.5));
					}
					/// ARMOR
					if(ArmorValue >= 1 && ArmorValue <= 25)			// start flashing at 25%, but don't flash if you have none
					{
						DrawImage("PHWARNL", (BRCX + 81, BRCY - 23), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, WarnFlash);
					}
					if(CorruptDisp == true)
					{
						DrawImage("PRACR1", (BLCX + 38, BLCY - 8), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
					}
					else
					{
						DrawImage("PHBARBKA", (BLCX + 38, BLCY - 8), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
					}
					DrawImage("APICON", (BLCX + 62, BLCY - 34), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, ArmorIconAlpha);
					if(Cvar.GetCVar("helm_showchips", CPlayer).GetInt())
					{
						DrawBar("PHBARAP5", "PHBARAP2", APInterp.GetValue() / 5, 100, (BLCX + 56, BLCY - 20), 0, SHADER_HORZ, DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_TOP, DisplayFlicker);
					}
					DrawBar("PHBARAP", "PHBARAP2", ArmorValue, 100, (BLCX + 56, BLCY - 20), 0, SHADER_HORZ, DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_TOP, DisplayFlicker);
					if(ArmorValue >= 101)
					{
						DrawImage("APICON2", (BLCX + 62, BLCY - 34), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, MegaArmorAlpha);
						DrawBar("PHBARAP3", "PHBARAP4", (ArmorValue - 100), 100, (BLCX + 56, BLCY - 20), 0, SHADER_VERT | SHADER_REVERSE, DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_TOP, DisplayFlicker);
					}
					if(CheckInventory("PowerIronFeet", 1))
					{
						let rad = Powerup(CPlayer.mo.FindInventory("PowerIronFeet"));
						DrawBar("PHRADBR1", "PHRADBR2", rad.EffectTics / 35, 60, (BLCX + 56, BLCY - 20), 0, SHADER_HORZ, DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_TOP, DisplayFlicker);
						DrawString(statRepSmall, "RAD:"..FormatNumber(rad.EffectTics/35, 1, 3), (BLCX + 57, BLCY - 19), DI_TEXT_ALIGN_LEFT | DI_SCREEN_LEFT_BOTTOM, Font.CR_Ice, Alpha:DisplayFlicker);
					}

					if(ArmorValue >= 1)
					{
						DrawString(mIndexFont, FormatNumber(ArmorProtection, 1, 3), (BLCX + 61.5, BLCY - 38), DI_TEXT_ALIGN_CENTER | DI_SCREEN_LEFT_BOTTOM, font.CR_WHITE, Alpha: DisplayFlicker, scale: (0.80, 0.8));
					}
					DrawString(mHUDFontMono, BlankChar, (BLCX + 123, BLCY - 43), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_LEFT_BOTTOM, font.CR_DarkGray, Alpha: (HudBackAlpha / 2), scale: (1.5, 1.5));
					if(CorruptNum == true)
					{
						DrawString(mHUDFontMono, String.Format("%c",Garbage1)..String.Format("%c",Garbage3)..String.Format("%c",Garbage2), (BLCX + 123, BLCY - 43), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_LEFT_BOTTOM, APCol, Alpha: DisplayFlicker, scale: (1.5, 1.5));
					}
					else
					{
						DrawString(mHUDFontMono, FormatNumber(ArmorValue, 1, 3), (BLCX + 123, BLCY - 43), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_LEFT_BOTTOM, APCol, Alpha: DisplayFlicker, scale: (1.5, 1.5));
					}
					if(CheckInventory("ITactic", 1))
					{
						if(CorruptDisp == true)
						{
							DrawImage("PSTMR1", (BLCX + 113, BLCY - 8), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
						}
						else
						{
							DrawImage("PHSTMBK", (BLCX + 113, BLCY - 8), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
						}
						DrawImage("PHSTMIC", (BLCX + 113, BLCY - 8), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
						DrawBar("PSTMBR1", "PSTMBR2", (100 - GetAmount("DummyStamina")), 100, (BLCX + 115, BLCY - 18), 0, SHADER_VERT | SHADER_REVERSE, DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
					}
					else if(CheckInventory("FR_Stam", 1))
					{
						if(CorruptDisp == true)
						{
							DrawImage("PSTMR1", (BLCX + 113, BLCY - 8), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
						}
						else
						{
							DrawImage("PHSTMBK", (BLCX + 113, BLCY - 8), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
						}
						DrawImage("PHSTMIC", (BLCX + 113, BLCY - 8), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
						DrawBar("PSTMBR1", "PSTMBR2", GetAmount("DummyStamina"), 1000, (BLCX + 115, BLCY - 18), 0, SHADER_VERT | SHADER_REVERSE, DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
					}

				}
				/// KEYS
				if(Cvar.GetCVar("helm_showmugshot", CPlayer).GetInt())		//if the mug is enabled the key panel moves and connects to it
				{
					if(CorruptDisp == true)
					{
						DrawImage("PK3YC1", (BLCX + 62, BLCY - 82), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
					}
					else
					{
						DrawImage("PHK3YBK", (BLCX + 62, BLCY - 82), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
					}
					//this code is pretty much just ripped from gzdoom.pk3 because I am not smart
					for (i = 0; i < 6; i++) locks[i] = CPlayer.mo.CheckKeys(i + 1, false, true);
					// key 1
					if (locks[1] && locks[4]) image = "STKEYS6";
					else if (locks[1]) image = "STKEYS0";
					else if (locks[4]) image = "STKEYS3";
					else image = "";
					DrawImage(image, (BLCX + 72.5, BLCY - 88.5), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
					// key 2
					if (locks[2] && locks[5]) image = "STKEYS7";
					else if (locks[2]) image = "STKEYS1";
					else if (locks[5]) image = "STKEYS4";
					else image = "";
					DrawImage(image, (BLCX + 82.5, BLCY - 88.5), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
					// key 3
					if (locks[0] && locks[3]) image = "STKEYS8";
					else if (locks[0]) image = "STKEYS2";
					else if (locks[3]) image = "STKEYS5";
					else image = "";
					DrawImage(image, (BLCX + 92.5, BLCY - 88.5), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
				}
				else
				{
					
					if(CorruptDisp == true)
					{
						DrawImage("PKEYC1", (BLCX + 21, BLCY - 82), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
					}
					else
					{
						DrawImage("PHKEYBK", (BLCX + 21, BLCY - 82), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
					}
					for (i = 0; i < 6; i++) locks[i] = CPlayer.mo.CheckKeys(i + 1, false, true);
					// key 1
					if (locks[1] && locks[4]) image = "STKEYS6";
					else if (locks[1]) image = "STKEYS0";
					else if (locks[4]) image = "STKEYS3";
					else image = "";
					DrawImage(image, (BLCX + 31.5, BLCY - 88.5), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
					// key 2
					if (locks[2] && locks[5]) image = "STKEYS7";
					else if (locks[2]) image = "STKEYS1";
					else if (locks[5]) image = "STKEYS4";
					else image = "";
					DrawImage(image, (BLCX + 41.5, BLCY - 88.5), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
					// key 3
					if (locks[0] && locks[3]) image = "STKEYS8";
					else if (locks[0]) image = "STKEYS2";
					else if (locks[3]) image = "STKEYS5";
					else image = "";
					DrawImage(image, (BLCX + 51.5, BLCY - 88.5), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
				}
			}
			if(CheckInventory("AmmoOn", 1))
			{
				/// AMMO	
				if(!Cvar.GetCVar("helm_minmode", CPlayer).GetInt())
				{
					if(ammotype1 != null)
					{
						if(ammotype2 == null)		//if weapon does not use a magazine and feeds directly from reserve, function like the reseve ammo counter
						{
							if(ammotype1.Amount <= (ammotype1.MaxAmount / 10))
							{
								DrawImage("PHWARNR", (BRCX - 68, BRCY - 60), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, WarnFlash);
							}
						}
						else if(ammotype1.Amount <= (ammotype1.MaxAmount / 4))		// else start flashing at 25%
						{
								DrawImage("PHWARNR", (BRCX - 68, BRCY - 60), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, WarnFlash);
						}
						if(CorruptDisp == true)
						{
							DrawImage("PRMCR1", (BLCX - 25, BLCY - 45), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
						}
						else
						{
							DrawImage("PHBARBKM", (BLCX - 25, BLCY - 45), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
						}						DrawImage("MGICON", (BLCX - 49, BRCY - 71), DI_ITEM_CENTER | DI_SCREEN_RIGHT_BOTTOM, DisplayFlicker);
						DrawBar("PHBARMG", "PHBARMG2", ammotype1.Amount, ammotype1.MaxAmount, (BRCX - 43, BRCY - 57), 0, SHADER_HORZ | SHADER_REVERSE, DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT_TOP, DisplayFlicker);
						DrawString(mHUDFontMono, BlankChar, (BRCX - 71, BRCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_DarkGray, Alpha: (HudBackAlpha / 2), scale: (1.5, 1.5));		
						if(CorruptNum == true)
						{
							DrawString(mHUDFontMono, String.Format("%c",Garbage3)..String.Format("%c",Garbage2)..String.Format("%c",Garbage1), (BRCX - 71, BRCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_Gold, Alpha: DisplayFlicker, scale: (1.5, 1.5));
						}
						else
						{
							DrawString(mHUDFontMono, FormatNumber(ammotype1.Amount, 1, 3), (BRCX - 71, BRCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_Gold, Alpha: DisplayFlicker, scale: (1.5, 1.5));
						}
						priLight = 2;
					}
					else priLight = 0;
					if(ammotype2 != null && ammotype2 != ammotype1)	// don't draw if it doesn't use it or if it's the same as ammo1
					{
						if(ammotype2.Amount <= (ammotype2.MaxAmount / 10))			// start flashing at 10%
						{
							DrawImage("PHWARNR", (BRCX - 81, BRCY - 23), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, WarnFlash);
						}
						if(CorruptDisp == true)
						{
							DrawImage("PRRCR1", (BRCX - 38, BRCY - 8), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
						}
						else
						{
							DrawImage("PHBARBKR", (BRCX - 38, BRCY - 8), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
						}	
						DrawImage("RSICON", (BRCX - 62, BRCY - 34), DI_ITEM_CENTER | DI_SCREEN_RIGHT_BOTTOM, DisplayFlicker);
						DrawBar("PHBARRS", "PHBARRS2", ammotype2.Amount, ammotype2.MaxAmount, (BRCX - 56, BRCY - 20), 0, SHADER_HORZ | SHADER_REVERSE, DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT_TOP, DisplayFlicker);
						DrawString(mHUDFontMono, BlankChar, (BRCX - 84, BRCY - 43), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, font.CR_DarkGray, Alpha: (HudBackAlpha / 2), scale: (1.5, 1.5));
						if(CorruptNum == true)
						{
							DrawString(mHUDFontMono, String.Format("%c",Garbage2)..String.Format("%c",Garbage1)..String.Format("%c",Garbage3), (BRCX - 84, BRCY - 43), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_Yellow, Alpha: DisplayFlicker, scale: (1.5, 1.5));
						}
						else
						{
							DrawString(mHUDFontMono, FormatNumber(ammotype2.Amount, 1, 3), (BRCX - 84, BRCY - 43), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_Yellow, Alpha: DisplayFlicker, scale: (1.5, 1.5));
						}
						resLight = 1;
					}
					else resLight = 0;
					/// OTHER MOD STUFF
					// Brutal Doom v22 & any other mods that use the same actor names
					if(CheckInventory("RFGrenPresent") && GetWeaponTag() == "Rifle")
					{
						DrawImage("RFGRNBK", (BRCX - 62, BRCY - 77), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
						if(CheckInventory("DummyUBGL", 1))
							DrawImage("RFGRNIG", (BRCX - 63, BRCY - 78), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, DisplayFlicker);
						else
							DrawImage("RFGRNIR", (BRCX - 63, BRCY - 78), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, DisplayFlicker);
					}
				}
				if(CheckInventory("IGotNades", 1))
				{
					AmmoExtra1 = true;
					AmmoExtra2 = -1;	
					int NumNades = GetAmount("DummyGrenadeAmmo");
					if(CorruptDisp == true)
					{
						DrawImage("PGRNR1", (BRCX - 19, BRCY - 82), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
					}
					else if(ammotype1 == null)
					{
						DrawImage("PHGRNBK2", (BRCX - 19, BRCY - 82), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
					}
					else
					{
						DrawImage("PHGRNBK", (BRCX - 19, BRCY - 82), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
					}
					DrawImage("PHGRNBK3", (BRCX - 19, BRCY - 82), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, DisplayFlicker);
					if(CorruptNum == true)
					{
							DrawString(statRepSmall, String.Format("%c",Garbage2), (BRCX - 45, BRCY - 91.5), DI_TEXT_ALIGN_CENTER | DI_SCREEN_RIGHT_BOTTOM, Font.CR_DarkGreen, Alpha: DisplayFlicker);
					}
					else
					{
							DrawString(statRepSmall, FormatNumber(NumNades, 1, 4), (BRCX - 45, BRCY - 91.5), DI_TEXT_ALIGN_CENTER | DI_SCREEN_RIGHT_BOTTOM, Font.CR_DarkGreen, Alpha: DisplayFlicker);
					}
				
				}
				else
				{
					AmmoExtra1 = false;
					AmmoExtra2 = 1;
				}
			}
			/// LEVEL STATS
//			DrawString(mIndexFont, "TIME", (TopX, TopY + 12), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker, scale: (0.5, 0.5));
			if(Cvar.GetCVar("helm_showstats", CPlayer).GetInt() && CheckInventory("StatsOn", 1))
			{
				if(CorruptDisp == true)
				{
					DrawImage("PSTAC1", (TopX, TopY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
				}
				else
				{
					DrawImage("PHSTABK", (TopX, TopY + 7), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
				}
				int killRemain = level.total_monsters - level.killed_monsters;
				int itemRemain = level.total_items - level.found_items;
				int secrRemain = level.total_secrets - level.found_secrets;
				int kCol;
				int iCol;
				int sCol;
				if(killRemain == 0)
					kCol = Font.CR_GOLD;
				else
					kCol = Font.CR_GREY;
				if(itemRemain == 0)
					iCol = Font.CR_GOLD;
				else
					iCol = Font.CR_GREEN;
				if(secrRemain == 0)
					sCol = Font.CR_GOLD;
				else
					sCol = Font.CR_LIGHTBLUE;
					
				DrawString(statRepSmall, "KILLS", (TopX - 26, TopY + 19), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_CENTER_TOP, Font.CR_DARKGRAY, Alpha: DisplayFlicker);
				DrawString(statRepSmall, "ITEMS", (TopX -1, TopY + 19), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_DARKGREEN, Alpha: DisplayFlicker);
				DrawString(statRepSmall, "SCRTS", (TopX + 26, TopY + 19), DI_TEXT_ALIGN_LEFT | DI_SCREEN_CENTER_TOP, Font.CR_BLUE, Alpha: DisplayFlicker);
				if(Cvar.GetCVar("helm_statstyle", CPlayer).GetInt())
				{
					DrawString(enlFont, FormatNumber(level.killed_monsters, 1, 3), (TopX - 26, TopY + 26), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_CENTER_TOP, kCol, Alpha: DisplayFlicker);
					DrawString(enlFont, FormatNumber(level.found_items, 1, 3), (TopX - 1, TopY + 26), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, iCol, Alpha: DisplayFlicker);
					DrawString(enlFont, FormatNumber(level.found_secrets, 1, 3), (TopX + 26, TopY + 26), DI_TEXT_ALIGN_LEFT | DI_SCREEN_CENTER_TOP, sCol, Alpha: DisplayFlicker);
				}
				else
				{
					DrawString(enlFont, FormatNumber(killRemain, 1, 3), (TopX - 26, TopY + 26), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_CENTER_TOP, kCol, Alpha: DisplayFlicker);
					DrawString(enlFont, FormatNumber(itemRemain, 1, 3), (TopX - 1, TopY + 26), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, iCol, Alpha: DisplayFlicker);
					DrawString(enlFont, FormatNumber(secrRemain, 1, 3), (TopX + 26, TopY + 26), DI_TEXT_ALIGN_LEFT | DI_SCREEN_CENTER_TOP, sCol, Alpha: DisplayFlicker);
				}

//				DrawString(statRepSmall, level.Mapname, (TopX - 10, TopY + 12), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);
//				DrawString(statRepSmall, level.TimeFormatted(), (TopX + 10, TopY + 12), DI_TEXT_ALIGN_LEFT | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);
				DrawString(statRepSmall, level.Mapname, (TopX - 70, TopY + 12), DI_TEXT_ALIGN_LEFT | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);
				DrawString(statRepSmall, level.TimeFormatted(), (TopX + 70, TopY + 12), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);
//				DrawString(enlFont, level.TimeFormatted(), (TopX + 66, TopY + 23), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);
//				DrawString(enlFont, level.TimeFormatted(true), (TopX + 67, TopY + 19), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_CENTER_TOP, Font.CR_YELLOW, Alpha: DisplayFlicker);			
//				DrawString(enlFont, level.Mapname, (TopX - 1, TopY + 19), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);
	//			DrawString(enlFont, level.Levelname, (TopX, TopY + 23), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);
				/*
				DrawImage("PHSTABK", (TopX, TopY + 7), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HudBackAlpha);
				DrawString(enlFont, "K: "..level.killed_monsters.."/"..level.total_monsters, (TopX - 74, TopY + 10), DI_TEXT_ALIGN_LEFT | DI_SCREEN_CENTER_TOP, Font.CR_GREY, Alpha: DisplayFlicker);
				DrawString(enlFont, "I: "..level.found_items.."/"..level.total_items, (TopX - 67, TopY + 19), DI_TEXT_ALIGN_LEFT | DI_SCREEN_CENTER_TOP, Font.CR_GREEN, Alpha: DisplayFlicker);
				DrawString(enlFont, "S: "..level.found_secrets.."/"..level.total_secrets, (TopX - 60, TopY + 28), DI_TEXT_ALIGN_LEFT | DI_SCREEN_CENTER_TOP, Font.CR_LIGHTBLUE, Alpha: DisplayFlicker);
				DrawString(enlFont, level.TimeFormatted(), (TopX + 74, TopY + 10), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);
				DrawString(enlFont, level.TimeFormatted(true), (TopX + 67, TopY + 19), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_CENTER_TOP, Font.CR_YELLOW, Alpha: DisplayFlicker);			
//				DrawString(enlFont, level.Mapname, (TopX - 1, TopY + 19), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);
	//			DrawString(enlFont, level.Levelname, (TopX, TopY + 23), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);
				*/
			}
			if(CheckInventory("PowerLightAmp", 1))
			{
				DrawImage("PHNVBK1", (TopX, TopY + 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HudBackAlpha);
				let lamp = Powerup(CPlayer.mo.FindInventory("PowerLightAmp")); //cast this so it doesn't throw a fit
				DrawBar("PHNVBR1", "PHNVBR2", lamp.EffectTics/35, 120, (TopX, TopY+12), 0, SHADER_HORZ, DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, DisplayFlicker);
				DrawString(statRepSmall, "NV:"..FormatNumber(lamp.EffectTics/35, 1, 3), (TopX - 1, TopY+10), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP,Font.CR_WHITE, Alpha:DisplayFlicker);
			}

		}
		
	}
	
	void DrawMinmodeHudStuff()
	{
		if(HealthPoints <= 25)			// start flashing at 25%
		{
			DrawImage("PHWNML2", (BRCX + 23, BRCY - 60), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, WarnFlash);
		}
		if(ArmorValue <= 25 && ArmorValue != 0)			// start flashing at 25%
		{
			DrawImage("PHWNML1", (BRCX + 68, BRCY - 60), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, WarnFlash);
		}
		if(CorruptDisp)
		{
			DrawImage("PHMINCR1", (BLCX + 25, BLCY - 45), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
		}
		else
		{
			DrawImage("PHMINBKL", (BLCX + 25, BLCY - 45), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
		}
		//HEALTH	
		if(Cvar.GetCVar("helm_showchips", CPlayer).GetInt())
		{
			DrawBar("PHMNBD1", "PHMNBMT", HPInterp.GetValue() / 5, 100, (BLCX + 39, BLCY - 61), 0, SHADER_HORZ, DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_TOP, DisplayFlicker);
		}
		DrawBar("PHMNBH1", "PHMNBMT", HealthPoints, 100, (BLCX + 39, BLCY - 61), 0, SHADER_HORZ, DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_TOP, DisplayFlicker);
		if(HealthPoints > 100)
		{
			DrawBar("PHMNBH3", "PHMNBH4", HealthPoints - 100, 100, (BLCX + 39, BLCY - 61), 0, SHADER_HORZ, DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_TOP, DisplayFlicker);
		}
		if(CheckInventory("PowerInvulnerable", 1))
		{
			let god = Powerup(CPlayer.mo.FindInventory("PowerInvulnerable"));
			DrawString(statRepSmall, "GOD:"..FormatNumber(god.EffectTics/35, 1, 3), (BLCX + 40, BLCY - 62), DI_TEXT_ALIGN_LEFT | DI_SCREEN_LEFT_BOTTOM, Font.CR_Ice, Alpha:DisplayFlicker);
		}
		if(CheckInventory("PowerStrength", 1))
		{
			DrawString(statRepSmall, "+", (BLCX + 29, BLCY - 83), DI_TEXT_ALIGN_LEFT | DI_SCREEN_LEFT_BOTTOM, Font.CR_DarkRed, Alpha: DisplayFlicker);
		}
		DrawString(mHUDFontMono, BlankChar, (BLCX + 70, BLCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_LEFT_BOTTOM, Font.CR_DarkGray, Alpha: (HudBackAlpha / 2), scale: (1.25, 1.25));		
		if(CorruptNum == true)
		{
			DrawString(mHUDFontMono, String.Format("%c",Garbage1)..String.Format("%c",Garbage2)..String.Format("%c",Garbage3), (BLCX + 70, BLCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_LEFT_BOTTOM, HPCol, Alpha: DisplayFlicker, scale: (1.25, 1.25));
		}
		else
		{
			DrawString(mHUDFontMono, FormatNumber(HealthPoints, 1, 3), (BLCX + 70, BLCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_LEFT_BOTTOM, HPCol, Alpha: DisplayFlicker, scale: (1.25, 1.25));
		}
		//ARMOR
		if(Cvar.GetCVar("helm_showchips", CPlayer).GetInt())
		{
			DrawBar("PHMNBD1", "PHMNBMT", APInterp.GetValue() / 5, 100, (BLCX + 42, BLCY - 53), 0, SHADER_HORZ, DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_TOP, DisplayFlicker);					
		}
		DrawBar("PHMNBA1", "PHMNBMT", ArmorValue, 100, (BLCX + 42, BLCY - 53), 0, SHADER_HORZ, DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_TOP, DisplayFlicker);
		if(ArmorValue > 100)
		{
			DrawBar("PHMNBA3", "PHMNBA4", ArmorValue - 100, 100, (BLCX + 42, BLCY - 53), 0, SHADER_HORZ, DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_TOP, DisplayFlicker);
		}
		if(CheckInventory("PowerIronFeet", 1))
		{
			let rad = Powerup(CPlayer.mo.FindInventory("PowerIronFeet"));
			DrawString(statRepSmall, "RAD:"..FormatNumber(rad.EffectTics/35, 1, 3), (BLCX + 43, BLCY - 54), DI_TEXT_ALIGN_LEFT | DI_SCREEN_LEFT_BOTTOM, Font.CR_Ice, Alpha:DisplayFlicker);
		}

		DrawString(mHUDFontMono, BlankChar, (BLCX + 110, BLCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_LEFT_BOTTOM, font.CR_DarkGray, Alpha: (HudBackAlpha / 2), scale: (1.25, 1.25));
		if(CorruptNum == true)
		{
			DrawString(mHUDFontMono, String.Format("%c",Garbage1)..String.Format("%c",Garbage3)..String.Format("%c",Garbage2), (BLCX + 110, BLCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_LEFT_BOTTOM, APCol, Alpha: DisplayFlicker, scale: (1.25, 1.25));
		}
		else
		{
			DrawString(mHUDFontMono, FormatNumber(ArmorValue, 1, 3), (BLCX + 110, BLCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_LEFT_BOTTOM, APCol, Alpha: DisplayFlicker, scale: (1.25, 1.25));
		}
		if(CheckInventory("ITactic", 1))
		{
			DrawImage("MNSTMBK", (BLCX + 113, BLCY - 46), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
			DrawImage("MNSTMIC", (BLCX + 113, BLCY - 46), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
			DrawBar("MNSTMBR1", "MNSTMBR2", (100 - GetAmount("DummyStamina")), 100, (BLCX + 116, BLCY - 56), 0, SHADER_VERT | SHADER_REVERSE, DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
		}
		else if(CheckInventory("FR_Stam", 1))
		{
			DrawImage("MNSTMBK", (BLCX + 73, BLCY - 45), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
			DrawImage("MNSTMIC", (BLCX + 73, BLCY - 45), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
			DrawBar("MNSTMBR1", "MNATMBR2", GetAmount("DummyStamina"), 1000, (BLCX + 75, BLCY - 55), 0, SHADER_VERT | SHADER_REVERSE, DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
		}

		//AMMO
		resLight = 0;
		if(ammotype1 != null && (ammotype2 == null || ammotype2 == ammotype1)) //Draw the non-minimized ammo1 display if no ammo2 or if they're the same
		{
			if(ammotype1.Amount <= (ammotype1.MaxAmount / 10))
			{
				DrawImage("PHWARNR", (BRCX - 68, BRCY - 60), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, WarnFlash);
			}
			if(CorruptDisp == true)
			{
				DrawImage("PRMCR1", (BLCX - 25, BLCY - 45), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
			}
			else
			{
				DrawImage("PHBARBKM", (BLCX - 25, BLCY - 45), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
			}
			DrawImage("MGICON", (BLCX - 49, BRCY - 71), DI_ITEM_CENTER | DI_SCREEN_RIGHT_BOTTOM, DisplayFlicker);
			DrawBar("PHBARMG", "PHBARMG2", ammotype1.Amount, ammotype1.MaxAmount, (BRCX - 43, BRCY - 57), 0, SHADER_HORZ | SHADER_REVERSE, DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT_TOP, DisplayFlicker);
			DrawString(mHUDFontMono, BlankChar, (BRCX - 71, BRCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_DarkGray, Alpha: (HudBackAlpha / 2), scale: (1.5, 1.5));		
			if(CorruptNum == true)
			{
				DrawString(mHUDFontMono, String.Format("%c",Garbage3)..String.Format("%c",Garbage2)..String.Format("%c",Garbage1), (BRCX - 71, BRCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_Gold, Alpha: DisplayFlicker, scale: (1.5, 1.5));
			}
			else
			{
				DrawString(mHUDFontMono, FormatNumber(ammotype1.Amount, 1, 3), (BRCX - 71, BRCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_Gold, Alpha: DisplayFlicker, scale: (1.5, 1.5));
			}
			priLight = 2;
		}
		else if(ammotype1 != null || ammotype2 != null)
		{
		//ammo 1
		priLight = 2;
		if(ammotype1 != null && ammotype1.Amount <= (ammotype1.MaxAmount / 4)) //doing these here instead of with the rest of the related functions so that the background is drawn over the flashes like the normal HUD
		{
			DrawImage("PHWNMR1", (BRCX - 68, BRCY - 60), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, WarnFlash);
		}
		if(ammotype2 != null &&ammotype2.Amount <= (ammotype2.MaxAmount / 10))
		{
			DrawImage("PHWNMR2", (BRCX - 23, BRCY - 60), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, WarnFlash);
		}
		if(CorruptDisp)
		{
			DrawImage("PHMINCR1", (BLCX - 25, BLCY - 45), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM | DI_MIRROR, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
		}
		else
		{
			DrawImage("PHMINBKL", (BLCX - 25, BLCY - 45), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM | DI_MIRROR, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent, color(255, dispCol.r, dispCol.g, dispCol.b));
		}
		DrawString(mHUDFontMono, BlankChar, (BRCX - 76, BRCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_DarkGray, Alpha: (HudBackAlpha / 2), scale: (1.25, 1.25));								
		if(ammotype1 != null)
		{
			DrawBar("PHMNBM1", "PHMNBMT", ammotype1.Amount, ammotype1.MaxAmount, (BLCX - 39, BLCY - 61), 0, SHADER_HORZ | SHADER_REVERSE, DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT_TOP, DisplayFlicker);
			if(CorruptNum == true)
			{
				DrawString(mHUDFontMono, String.Format("%c",Garbage3)..String.Format("%c",Garbage2)..String.Format("%c",Garbage1), (BRCX - 76, BRCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_Gold, Alpha: DisplayFlicker, scale: (1.25, 1.25));
			}
			else
			{
				DrawString(mHUDFontMono, FormatNumber(ammotype1.Amount, 1, 3), (BRCX - 76, BRCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_Gold, Alpha: DisplayFlicker, scale: (1.25, 1.25));
			}
		}
		else
		{
			DrawString(mHUDFontMono, "N/A", (BRCX - 76, BRCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_Gold, Alpha: DisplayFlicker, scale: (1.25, 1.25));
			DrawImage("PHMNBD1", (BLCX - 39, BLCY - 61), DI_ITEM_RIGHT_TOP | DI_SCREEN_RIGHT_BOTTOM, HudBackAlpha, (-1, -1), (1, 1), STYLE_Translucent);
		}
		//AMMO 2
		DrawString(mHUDFontMono, BlankChar, (BRCX - 36, BRCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_DarkGray, Alpha: (HudBackAlpha / 2), scale: (1.25, 1.25));								
		if(ammotype2 != null)
		{
			DrawBar("PHMNBR1", "PHMNBMT", ammotype2.Amount, ammotype2.MaxAmount, (BLCX - 42, BLCY - 53), 0, SHADER_HORZ | SHADER_REVERSE, DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT_TOP, DisplayFlicker);
			if(CorruptNum == true)
			{
				DrawString(mHUDFontMono, String.Format("%c",Garbage2)..String.Format("%c",Garbage1)..String.Format("%c",Garbage3), (BRCX - 76, BRCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_Yellow, Alpha: DisplayFlicker, scale: (1.25, 1.25));
			}
			else
			{
				DrawString(mHUDFontMono, FormatNumber(ammotype2.Amount, 1, 3), (BRCX - 36, BRCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_Yellow, Alpha: DisplayFlicker, scale: (1.25, 1.25));
			}
		}
		else
			DrawString(mHUDFontMono, "N/A", (BRCX - 36, BRCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_Yellow, Alpha: DisplayFlicker, scale: (1.25, 1.25));
		}
		else
		priLight = 0;

	}

    override void Tick()
    {
		Super.Tick();
		if(CorruptNum == true)
		{
			DoGarbage();	
		}
		DoSwayStuff(); // Handles the HUD swaying around and shaking
		if(Cvar.GetCVar("helm_startup", CPlayer).GetInt() && !CheckInventory("StartupCompleted", 1))
		{
		if(StartupTics < 0)
			{
				StartupTics++;
			}
			else
			{
				if(!CheckInventory("StartupCompleted", 1))
				{
		//			DrawImage("STRTVR", (GlassX,GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, (100 - StartupTics), (-1, -1), (1, ((100 - StartupTics) * 0.1)), STYLE_Subtract);
					StartupTics++;
				}
			}
		}
		if(!CheckInventory("StartupCompleted", 1))
		{
			if(StartupTics == -69)
			{
				FigureOutStartup();	// only call this once at the beginning of the startup sequence
				S_StartSound("HDDSTRT", CHAN_7, 0, 0.8 * SFXVolume);
			}
			if(StartupTics == -49)
			{
				S_StartSound("DSPON", CHAN_AUTO, 0, 0.9 * SFXVolume);
			}
		}
		if(HealthPoints <= 0 && Cvar.GetCVar("helm_death", CPlayer).GetInt())
		{
			DeathTics+= 2;
		}
		int CorruptChance = CVar.GetCVar("helm_corruptchance", CPlayer).GetInt();
		ArmorValue = GetArmorAmount();
		if(Cvar.GetCVar("helm_dispdamage", CPlayer).GetInt() && (CrackCount != 0 && random(1,(CorruptChance - ((CrackCount - 1)* 10))) <= 1))
		{
			randomcorrupt = random(4,4 + (CrackCount * 4));
			S_StartSound("displaycorrupt", CHAN_7, 0, (HelmLightOutInterp.GetValue() / 100.0) * SFXVolume);
		}
		if(randomcorrupt != 0)
		{
			randomcorrupt--;
		}
		if(OuchCanceller != 0)
		{
			OuchCanceller--;
		}
		if(DamageAnimTics != 0 && DamageAnimTics < 11)
		{
			DamageAnimTics++;
		}
		else if(DamageAnimTics == 11)
		{
			DamageAnimTics = 0;
		}
		if(FaultySpamTics != 0)
		{
			FaultySpamTics--;
		}
		ArmorIconAlpha = (ArmorValue / 100.0) * DisplayFlicker;
		if ((DisplayFlicker < 0.9 && DisplayFlicker > 0.1) && FaultySpamTics == 0)
		{
			FaultySpamTics = random(5,10);	// This variable is to prevent it from playing the glitch sound every tic, which leads to insane earrape due to overlapping sounds
			S_StartSound("DSPFLTY", CHAN_7, 0, (HelmLightOutInterp.GetValue() / 100.0) * SFXVolume);
		}
		if (FlickerTics == 99)
		{
			S_StartSound("DSHTDN", CHAN_7, CHANF_NOSTOP, SFXVolume);
			S_StartSound("visorcrack", CHAN_AUTO, 0, 0.8 * SFXVolume);
		}
		if (HealthPoints <= 0 && FlickerTics > 0)
		{
			FlickerTics--;
		}
		if (ArmorValue >= 1)
		{	
			ArmorProtection = GetArmorSavePercent();
		}
		if (ArmorValue >= 101)
		{	
			MegaArmorAlpha = ((ArmorValue - 100) / 100.0) * DisplayFlicker;
		}
		HealthPoints = CPlayer.Health;
		if((HPInterp.GetValue() / 5)!= HealthPoints)
		{
			HPInterp.Update(HealthPoints * 5);
		}
//		if(!CheckInventory("StartupCompleted", 1))
//		{
//			StartupTics++;
//		}
		if((APInterp.GetValue() / 5) != ArmorValue)
		{
			APInterp.Update(ArmorValue * 5);
		}
		if(Cvar.GetCVar("helm_swapammo", CPlayer).GetInt())
		{
			[ammotype2, ammotype1] = GetCurrentAmmo();
		}
		else
		{
			[ammotype1, ammotype2] = GetCurrentAmmo();
		}
		HealthIconAlpha = (HealthPoints / 100.0) * DisplayFlicker;
		if(CheckInventory("PowerInvulnerable", 1))
		{
			HPCol = Font.CR_DarkGreen;
		}
		else if (HealthPoints >= 101)
		{
			HPCol = Font.CR_Fire;
			OverhealthAlpha = ((HealthPoints - 100) / 100.0) * DisplayFlicker;
		}
		else if (HealthPoints <= 25)
		{
			HPCol = Font.CR_DarkRed;
		}
		else
		{
			HPCol = Font.CR_Red;
		}
		if (ArmorValue >= 101)
		{
			APCol = Font.CR_Blue;
		}
		else
		{
			APCol = Font.CR_Green;
		}
		if(ArmorValue >= MinRepairAmount)
		{
			if(CrackCount >= 1 || CrackAlphaInterp.GetValue() >= 1)
			{
			CrackAlphaInterp.Update(0);
			CrackAlpha = CrackAlphaInterp.GetValue() / 100.0;
			}
		}
		if (Cvar.GetCVar("helm_showstats", CPlayer).GetInt())
		{
			statoffset = 45;
		}
		else 
		{
			statoffset = 15;
		}
		if(Cvar.GetCVar("helm_warnflash", CPlayer).GetInt())
		{	
			if(WarnFlashInterp.GetValue() >= 21)
			{
				WarnFlashInterp.Update(20);
				WarnFlash = (WarnFlashInterp.GetValue() / 80.0) * DisplayFlicker;
			}
			else
			{
				WarnFlashInterp.Reset(100);
			}
		}
		else
		{
			WarnFlash = 0.0;
		}
		if (pickupMsgStrings.Size() > 0)
		{
			// Update the alpha values of each message.
			bool shouldclear = true;
			for (int i = 0; i < pickupMsgAlpha.Size(); i++)
			{
				if(HealthPoints > 0)
				{
					pickupMsgAlpha[i] = max(pickupMsgAlpha[i] - 0.025, 0.0);
				}
				if (pickupMsgAlpha[i] > 0)
				{
					// If at least a single message's alpha is
					// above zero, do not clear them.
					shouldclear = false;
				}
			}
			// If ALL messages' alpha is zero, clear arrays:
			if (shouldclear)
			{
				pickupMsgStrings.Clear();
				pickupMsgAlpha.Clear();
			}
			// Otherwise update scroll timer:
			else if (pickupMsgScrollTics > 0)
			{
				pickupMsgScrollTics--;
			}
		}
	}
	void DrawCustomPickupMessage(Vector2 pos, int flags, double scale = 1.0)
	{
		int msgcount = pickupMsgStrings.Size();
		if (msgcount <= 0 || !CheckInventory("MessageOn", 1)) return;
		// Get the height of the font (we will use this for vertical
		// spacing):
		double stringHeight = enlFont.mFont.GetHeight() * scale;
		// If there's more than 1 message in the queue, offset each
		// message to create an effect of them scrolling:
//		if (msgcount > 1)
//		{
//		pos.y -= stringheight * (double(pickupMsgScrollTics) / PICKUPMSG_SCROLLTIME);
//		}
		// Finally, draw all messages, starting from the newest one:
		for (int j = msgcount - 1; j >= 0; j--)
		{
			DrawString(enlFont, 
				pickupMsgStrings[j],
				pos,
				flags: flags,
				translation: Font.CR_White,
				// Pass the alpha value from the alpha values array.
				// Don't forget to clamp it  to 1.0 here, since it
				// starts at 2.0:
				alpha: (min(pickupMsgAlpha[j], 1.0)) * DisplayFlicker,
				scale: (scale, scale));
			// move up for the next message:
			pos.y += stringheight;
		}
	}
}


class CrackNumber : Inventory
{
	Default
	{
		Inventory.MaxAmount 2;
	}
}
/*
class Crack1 : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}

class Crack2 : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}
*/

class Ouchies : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}

class OuchMore : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}

//class DeadCrack: Inventory
//{
//	Default
//	{
//		Inventory.MaxAmount 1;
//	}
//}
class IGotNades: Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}
class DummyGrenadeAmmo: Inventory
{
	Default
	{
		Inventory.MaxAmount 10;
	}
}
class ITactic: Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}
class VitalsOn: Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}
class AmmoOn: Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}
class StatsOn: Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}
class MessageOn: Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}
class StartupCompleted: Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}
class DummyStamina: Inventory
{
	Default
	{
		Inventory.MaxAmount 1000;
	}
}

class HelmShaker : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}
class FR_Stam : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}
class RFGrenPresent : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}
class DummyUBGL : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}

class HLM_InThirdPerson : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}

//*/