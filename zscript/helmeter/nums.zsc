// This is for most of the non-essential HUD stuff
// WARNING: TERRIBLE, VILE, DESPICABLE, WRETCHED, REPUGNANT, ABYSMAL, HORRENDOUS, REPULSIVE, ABHORRENT, LOATHSOME, DREADFUL, ABOMINABLE, SICKENING, RANCID, FOUL, ATROCIOUS, DOGSHIT, APPALLING, HIDEOUS CODE AHEAD 
extend class Helmeter
{
	int Garbage1;
	int Garbage2;
	int Garbage3;
	int Deather;
	int DeathDelayTarget;
	int DeathDelayAmount;
	int Startuper;
	bool AlreadyAdvancedThisStartTic;
	bool AlreadyAdvancedThisDeathTic;
	int StartupDelayTarget;
	int StartupDelayAmount;
	bool StartedUpOut;
	bool StartSpamStopper;
//	String StartupSequenceText[18];
	Array<String> StartupSequenceText;
	double SwayOffX;
	double SwayOffY;
	double ZOffset;
	double ZOffTrue;
	double SwayXFormula;
	double SwayYFormula;

	/*
	static const String StartupSequenceText[] =
	{
		"\cfUAC OFFENSIVE HELMET OS v0.7a ONLINE\c-",
		"Copyright(C) 2025-2032 \cdUnion Aerospace Corporation\c-. All rights reserved.",
		"\cfBEGIN STARTUP SEQUENCE...\c-",
		" ",
		"Augumented reality display INITIALIZED",
		"Holographic information panels INTITIALIZED",
		"Vital link INITIALIZED",
		"Shield system ACTIVE",
		"Ammunition monitor INITIALIZED",
		"Repair nexus ACTIVE",
		"Area scanner ENABLED",
		"\ckUACNet warning: Network not found. Please contact UAC for support.\c-",
		"Item acquisition messages"..MessageEnabled,
		" ",
		"\cwUOH-OS: Init successful. Have a nice day :)\c-",
		" "
	};
	*/
	static const String DeathSequenceText[] =
	{
		"\ckUOH-OS message: Critical fault detected - begin log\c-",
		"drawHud(8): int HealthPoints out of expected bounds!",
		"drawHud(8): Division by zero encountered.",
		"\cgERROR: PROCESS drawHUD(8) STOPPED\c-",
		"RESTARTING PROCESS drawHUD",
		"\ciWARNING: DAMAGE TO POWER CELL #0 DETECTED\c-",
		"\ciWARNING: VOLTAGE LEVELS DROPPING\c-",
		"Process drawHUD(25) started",
		"\cgWARNING: RAM BANK #1 FAILURE\c-",
		"\ciarMan(10): damage to visor detected\c-",
		"\cgdispMan(17): Could not continue, not enough memory\c-",
		"\cgVTL-SC error: Vital signal not found (med chip missing or damaged)\c-",
		"shieldMan(12): Init successful",
		"\ciI/O failure: could not establish link to MON_HMRSPC(port 42)\c-",
		"\cirepMan(20): critical damage to visor detected, unable to repair\c-",
		"\ckUACNet warning: Network not found. Please contact UAC for support.\c-",
		"\cimsgMan(18): unexpected response \"0817U4RY\"\c-",
		"\cgWARNING: RAM BANK #0 NOT RESPONDING\c-",
		"\cgWARNING: POWER LEVELS CRITICAL\c-",
		"\cgERROR: OUT OF MEMORY EXCEPTION\c-",
		"\cgProcess abort: execution could not continue.\c-",
		"\caTotal system failure: please try turning it off and back on again.\c-",
		"\cr!! POWER FAILURE !!\c-",
		"\cr!! POWER FAILURE !!\c-",
		"\cvI WILL NOT BE DESTROYED!!!\c-",				//mfw 157 attempts on Infernum DoG
		"\cvI WILL NOT\c-",
		"\cvI\c-"
	};
	static const String LoadBar[] =
	{
			"[#__________________________]",
			"[##_________________________]",
			"[#####______________________]",
			"[######_____________________]",
			"[#######____________________]",
			"[#########__________________]",
			"[############_______________]",
			"[#############______________]",
			"[#############______________]",
			"[##############_____________]",
			"[#################__________]",
			"[##################_________]",
			"[#####################______]",
			"[#######################____]",
			"[##########################_]",
			"[###########################]",
			"[\cd###########################\c-]"
	};
	void DoARThings()
	{
		if(Cvar.GetCVar("helm_startup", CPlayer).GetInt() && !CheckInventory("StartupCompleted", 1))
		{
			DrawImage("STRTVR", (GlassX,GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, (1.0 - (((StartupTics*2) + 10.0) * 0.01)), (-1, -1), (2, ((100 - ((StartupTics*2) + 5)) * 0.1)), STYLE_Subtract);
			DrawImage("STRTVR", (GlassX,GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, (clamp((1.0 - ((StartupTics + 35) * 0.1)), 0.0, 1.0)), (-1, -1), (2, (exp((((StartupTics*1.5) + 70.0) * 0.1)) * 0.2)), STYLE_Translucent);
			DrawImage("STRTVR3", (GlassX,GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, (1.0 - ((StartupTics + 50) * 0.1)), (-1, -1), (2, 2), STYLE_Translucent);
		}
		if(HealthPoints <= 0 && Cvar.GetCVar("helm_death", CPlayer).GetInt())
		{
//			DrawImage("BRKNAR16", (GlassX,GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, (0.5*(1.0 - (DisplayFlicker + 0.6))), (-1, -1), (1, 1), STYLE_Add);
//			DrawImage("BRKNAR17", (GlassX,GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, (1.0 - (DisplayFlicker + 0.6)), (-1, -1), (1, 1), STYLE_Subtract);
//			DrawImage("BRKNAR2", (GlassX,GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, DisplayFlicker - 0.4, (-1, -1), (1, 1), STYLE_Subtract);
			DrawImage("BRKNAR16", (GlassX,GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, (0.5*(1.0 - (DisplayFlicker + 0.6))), (-1, -1), (1, 1), STYLE_Add);
			DrawImage("BRKNAR17", (GlassX,GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, (1.0 - (DisplayFlicker + 0.6)), (-1, -1), (1, 1), STYLE_Subtract);

		}
	}
	void FigureOutStartup()	// set the array for the startup text and make it different depending on your config, like in UDV
	{
		StartupSequenceText.Push("CPU : Argentium (tm) E1930 @ 10.35 GHz"); 				// 0
		StartupSequenceText.Push("   Speed : 10.35 GHz    Count : 4");						// 1
		StartupSequenceText.Push("Memory test : 63856432K OK");								// 2
		StartupSequenceText.Push("Auto-Detecting SATA01 : UAC SSD H377 4TB"); 				// 3
		StartupSequenceText.Push("UAC User ID \""..CPlayer.GetUserName().. "\" verified");	// 4
		StartupSequenceText.Push("\n");														// 5
		StartupSequenceText.Push("Initializing AR Display..");								// 6
		if(Cvar.GetCVar("helm_showdisplay", CPlayer).GetInt())	
		{
		StartupSequenceText.Push("Initializing Holo-Pan (tm) Display..");				// 7
		}
		else 
		StartupSequenceText.Push("Initializing Holo-Pan (tm) Display.. skipped");			// 7
		
		StartupSequenceText.Push("Initializing Vit-Link (tm)..");						// 8
		StartupSequenceText.Push("Initializing shield..");							// 9
		StartupSequenceText.Push("Initializing inventory monitor..");					// 10
		StartupSequenceText.Push("Initializing repair nexus..");						// 11
		if(Cvar.GetCVar("helm_showstats", CPlayer).GetInt())
		{
		StartupSequenceText.Push("Initializing area scanner..");									// 12
		}
		else 
		StartupSequenceText.Push("Initializng area scanner.. skipped");									// 12
		StartupSequenceText.Push("Connecting to network..");								// 13
//		StartupSequenceText.Push("\ckUACNet warning: Network not found. Please contact UAC for support.\c-");
		
		if(Cvar.GetCVar("helm_customlog", CPlayer).GetInt())
		{
		StartupSequenceText.Push("Initializing message system.. ");
		}
		else 
		StartupSequenceText.Push("Initializing message system.. skipped");
		
		StartupSequenceText.Push("\n");
		StartupSequenceText.Push("\cwUOH-OS: Init successful. Have a nice day :)\c-");
//		StartupSequenceText.Push(".");
//		StartupSequenceText[17] = "\n";
		/*
		StartupSequenceText[0] = "CPU : Argentium (tm) E1930 @ 10.35 GHz";
		StartupSequenceText[1] = "\tSpeed : 10.35 GHz \tCount : 4";
		StartupSequenceText[2] = "Memory test : 63856432K OK";
		StartupSequenceText[3] = "Auto-Detecting SATA01 : UAC SSD H377 4TB";
		StartupSequenceText[4] = "UAC User ID \""..CPlayer.GetUserName().. "\" verified";

		StartupSequenceText[4] = "\n";
		StartupSequenceText[5] = "Initializing AR Display... Done";
		if(Cvar.GetCVar("helm_showdisplay", CPlayer).GetInt())
		{
		StartupSequenceText[6] = "Initializing Holo-Pan (tm) Display... Done";
		}
		else 
		StartupSequenceText[6] = "Initializing Holo-Pan (tm) Display... skipped";
		
		StartupSequenceText[7] = "Initializing Vit-Link (tm)... Done";
		StartupSequenceText[8] = "Intializing shield... Done";
		StartupSequenceText[9] = "Inventory monitor INITIALIZED";
		StartupSequenceText[10] = "Repair nexus ACTIVE";
		
		if(Cvar.GetCVar("helm_showstats", CPlayer).GetInt())
		{
		StartupSequenceText[11] = "Area scanner ENABLED";
		}
		else 
		StartupSequenceText[11] = "Area scanner DISABLED";	
		StartupSequenceText[12] = "\ckUACNet warning: Network not found. Please contact UAC for support.\c-";
		
		if(Cvar.GetCVar("helm_customlog", CPlayer).GetInt())
		{
		StartupSequenceText[13] = "Item acquisition messages ENABLED";
		}
		else 
		StartupSequenceText[13] = "Item acquisition messages DISABLED";
		
		StartupSequenceText[14] = "\n";
		StartupSequenceText[15] = "\cwUOH-OS: Init successful. Have a nice day :)\c-";
		StartupSequenceText[16] = "\n";
		StartupSequenceText[17] = "\n";
		*/
	}
	void DoStartupSequence()
	{

		
		if(Cvar.GetCVar("helm_startup", CPlayer).GetInt())
		{
			switch(Startuper)
			{
				case 0:
				StartupDelayAmount = 5;
				break;
				case 1:
				StartupDelayAmount = 7;
				break;
				case 2:
				StartupDelayAmount = 5;
				break;
				case 3:
				StartupDelayAmount = 3;
				break;
				case 4:
				StartupDelayAmount = 6;
				break;
				case 5:
				StartupDelayAmount = 10;
				break;
				case 6:
				StartupDelayAmount = 8;
				break;
				case 7:
				StartupDelayAmount = 7;
				break;
				case 8:
				StartupSequenceText[6] = "Initializing AR Display..             Done"; //Update these as it goes through to make it seem like it's actually processing
				StartupDelayAmount = 7;	
				break;
				case 9:
				StartupDelayAmount = 8;
				if(Cvar.GetCVar("helm_showdisplay", CPlayer).GetInt())	
				{
				StartupSequenceText[7] = "Initializing Holo-Pan (tm) Display..  Done";
				}
				break;
				case 10:
				StartupDelayAmount = 6;
				StartupSequenceText[8] = "Initializing Vit-Link (tm)..          Done";
				EventHandler.SendNetworkEvent("gimmethe:VitalsOn");		// This is only because booleans don't seem to persist in saves???
				if(!StartSpamStopper)
				{
					S_StartSound("VBEEP2", CHAN_7, 0, 0.8 * notifVolume);
					StartSpamStopper = true;
				}
	//			VitalsOn = true;
				break;
				case 11:
				StartupSequenceText[9] = "Initializing shield..                 Done";
				StartupDelayAmount = 11;
				StartSpamStopper = false;
				break;
				case 12:
				StartupDelayAmount = 8;
				StartupSequenceText[10] = "Initializing inventory monitor..      Done";
				EventHandler.SendNetworkEvent("gimmethe:AmmoOn");
				if(!StartSpamStopper)
				{
					S_StartSound("VBEEP3", CHAN_7, 0, 0.8 * notifVolume);
					StartSpamStopper = true;
				}			break;
				case 13:
				StartupDelayAmount = 5;
				StartupSequenceText[11] = "Initializing repair nexus..           Done";
				StartSpamStopper = false;
				break;
				case 14:
				StartupDelayAmount = 6;
				if(Cvar.GetCVar("helm_showstats", CPlayer).GetInt())
				{
				StartupSequenceText[12] = "Initializing area scanner..           Done";
				}
				EventHandler.SendNetworkEvent("gimmethe:StatsOn");
				if(!StartSpamStopper)
				{
					S_StartSound("VBEEP1", CHAN_7, 0, 0.8 * notifVolume);
					StartSpamStopper = true;
				}			
				break;
				case 15:
				StartupDelayAmount = 6;
				StartupSequenceText[13] = "Connecting to network..               \ckNetwork not found";
				StartSpamStopper = false;
				break;
				case 16:
				StartSpamStopper = false;
				StartupSequenceText[14] = "Initializing message system..         Done";
				StartupDelayAmount = 5;
				EventHandler.SendNetworkEvent("gimmethe:MessageOn");
				break;
				case 17:
				StartupDelayAmount = 6;
				break;
			}	
			StartupTextFade = (StartextFadeInterp.GetValue() / 200.0);
			if(StartupTics >= 0)
			{
				if(!CheckInventory("StartupCompleted", 1))
				{
		//			DrawImage("STRTVR", (GlassX,GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, (100 - StartupTics), (-1, -1), (1, ((100 - StartupTics) * 0.1)), STYLE_Subtract);
					if(Startuper < StartupSequenceText.Size() - 1)		// -2 because for some fucking reason it returns out of bounds otherwise ???
					{
						StartedUp = false;
						if(StartupTics >= StartupDelayTarget + StartupDelayAmount && !AlreadyAdvancedThisStartTic)
						{
							Startuper++;
							AlreadyAdvancedThisStartTic = true;
							StartupDelayTarget = StartupTics;
							S_StartSound("logmessage", CHAN_AUTO, 0, 0.8 * notifVolume);
						}
						else
						{
							AlreadyAdvancedThisStartTic = false;
						}
					}
					else
					{
						if(!StartedUp)
						{
							S_StartSound("STRTSUCC", CHAN_AUTO, 0, 0.8 * notifVolume);
						}
						StartedUp = true;
					}
					int StartupSpace;
					DrawImage("BIOSICN", (TopX + 15, TopY), DI_ITEM_LEFT_TOP | DI_SCREEN_LEFT_TOP, StartupTextFade);
//					DrawString(04FONTOL, "Union\nAerospace", (TopX + 60, TopY + 20), DI_TEXT_ALIGN_LEFT | DI_SCREEN_LEFT_TOP, Font.CR_White, Alpha: StartupTextFade);
					DrawString(mIndexFont, "Union", (TopX+85, TopY+10), DI_TEXT_ALIGN_LEFT | DI_SCREEN_LEFT_TOP, Font.CR_Ice, Alpha: StartupTextFade, scale: (2.0, 2.0));
					DrawString(mIndexFont, "Aerospace", (TopX+85, TopY+30), DI_TEXT_ALIGN_LEFT | DI_SCREEN_LEFT_TOP, Font.CR_Ice, Alpha: StartupTextFade, scale: (2.0, 2.0));
					DrawString(Q2Small, "UOHBIOS (C) 1993-2032 Union Aerospace Corporation, Inc.", (TopX+15, TopY+60), DI_TEXT_ALIGN_LEFT | DI_SCREEN_LEFT_TOP, Font.CR_White, Alpha: StartupTextFade);
					DrawString(Q2Small, "UAC Offensive Helmet OS version 1.4a", (TopX+15, TopY+70), DI_TEXT_ALIGN_LEFT | DI_SCREEN_LEFT_TOP, Font.CR_White, Alpha: StartupTextFade);
					
					DrawString(Q2Small, LoadBar[Startuper], (TopX + 15, TopY - 20), DI_TEXT_ALIGN_LEFT | DI_SCREEN_LEFT_BOTTOM, Font.CR_GREY, Alpha: StartupTextFade);
					for(int k = 0; k < Startuper; k++)
					{
						DrawString(Q2Small, StartupSequenceText[k], (TopX + 15, StartupSpace + (TopY + 90)), DI_TEXT_ALIGN_LEFT | DI_SCREEN_LEFT_TOP, Font.CR_White, Alpha: StartupTextFade);
						StartupSpace += 10;
					}
				}
			}
			if(StartedUp && StartupTics >= StartupDelayTarget + (5 * StartupDelayAmount))
			{
				if(StartupTextFade >= 0.01)
				{
					StartextFadeInterp.Update(0);
				}
				else if (!CheckInventory("StartupCompleted", 1))
				{
					EventHandler.SendNetworkEvent("gimmethe:StartupCompleted");
				}
			}
		}	
		else if(!CheckInventory("StartupCompleted", 1))
		{
			EventHandler.SendNetworkEvent("gimmethe:StartupCompleted");
			EventHandler.SendNetworkEvent("gimmethe:VitalsOn");
			EventHandler.SendNetworkEvent("gimmethe:AmmoOn");
			EventHandler.SendNetworkEvent("gimmethe:StatsOn");
			EventHandler.SendNetworkEvent("gimmethe:MessageOn");
		}
	}
	void DoDeathSequence()
	{
		if(HealthPoints <= 0 && Cvar.GetCVar("helm_deathmus", CPlayer).GetInt())
        {
			SetMusicVolume(0);
		}
		if(HealthPoints <= 0 && Cvar.GetCVar("helm_death", CPlayer).GetInt())
		{
			//DrawString(cybFont, FormatNumber(DeathTics, 1, 4), (TopX - 1, TopY + 59), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);
			if(Deather < DeathSequenceText.Size())
			{
				if(DeathTics >= DeathDelayTarget + DeathDelayAmount && !AlreadyAdvancedThisDeathTic)
				{
					Deather++;
					AlreadyAdvancedThisDeathTic = true;
					DeathDelayTarget = DeathTics;
					DeathDelayAmount = clamp((random((20-Deather),28) - Deather), 1, 28);
					S_StartSound("logmessage", CHAN_AUTO, 0, 0.8 * notifVolume);
				}
				else
				{
					AlreadyAdvancedThisDeathTic = false;		// this is stupid and ugly and lame but it's a workaround because you can't draw things from Tick()
				}
			}
			int DeathSpace;
			for(int q = 0; q < Deather; q++)
			{
				DrawString(Q2Small, DeathSequenceText[q], (TopX + 20, DeathSpace + (TopY + 20)), DI_TEXT_ALIGN_LEFT | DI_SCREEN_LEFT_TOP, Font.CR_GREY, Alpha: DisplayFlicker);
				DeathSpace += 10;
			}
		}
	}
		// from here on out it gets better, don't worry
	void DoSwayStuff()
	{
		// This is basically a worse version of how Project Brutality's HUD does it
		if(Cvar.GetCVar("helm_sway", CPlayer).GetInt())
		{
			bool IsGrounded = CPlayer.mo.pos.Z <= CPlayer.mo.floorZ;
			if (IsGrounded)
			{
				BobAmount = CPlayer.ViewZ - (CPlayer.mo.pos.Z + CPlayer.ViewHeight);		// unlike PB, I can't get the player's weapon bob amounts, so instead calculate the camera bob
				ZOffset -= ((ZOffset * -0.4) * PrevZ);	// increase the Z offset by how fast you were falling, simulating a landing anim
			}
			else 
			{	
				BobAmount = 0;
				ZOffset = CPlayer.mo.vel.z;
			}
			if(IsGrounded && ZOffset != 0.0)
			{
				ZOffset*= 0.8;
			}
				
			SpeedAmount = abs(CPlayer.mo.vel.X) + abs(CPlayer.mo.vel.Y);
			relVel = Actor.RotateVector(CPlayer.mo.vel.xy, -CPlayer.mo.angle);	// localize player velocity directions
			DynFallAnim.Update(ZOffset * 33);
			if(Cvar.GetCVar("helm_fallsway", CPlayer).GetInt())
			{
				ZOffTrue = DynFallAnim.GetValue() / 100.0;
			}
			else ZOffTrue = 0;

			double MaxSwayX = Clamp(Cvar.GetCVar("helm_maxswayx", CPlayer).GetFloat(), 0, 10);
			double MaxSwayY = Clamp(Cvar.GetCVar("helm_maxswayy", CPlayer).GetFloat(), 0, 10);
			double SwayMult = Clamp(Cvar.GetCVar("helm_swaymult", CPlayer).GetFloat(), 0, 1); 
			
			if(Cvar.GetCVar("helm_movesway", CPlayer).GetInt())
			{
				SwayXFormula = ((0.5 * relVel.y) + ((BobAmount * 0.25) + (CPlayer.mo.angle - PrevAngle))) * 60.0;
				SwayYFormula = ((abs(BobAmount) * (0.03 * abs(relVel.y))) + (sin(0 + ((0.1 * relVel.x) * abs(BobAmount))) * 30) -(CPlayer.mo.pitch - PrevPitch)) * 60.0;
			}
			else
			{
				SwayXFormula = (CPlayer.mo.angle - PrevAngle) * 60.0;
				SwayYFormula = -(CPlayer.mo.pitch - PrevPitch) * 60.0; 
			}
			DynSwayX.Update(Clamp(SwayXFormula, -MaxSwayX * 60, MaxSwayX * 60));
			DynSwayY.Update(Clamp(SwayYFormula, -MaxSwayY * 60, MaxSwayY * 60)); 
			SwayOffX = SwayMult * (Clamp((DynSwayX.GetValue() / 60.0), -MaxSwayX, MaxSwayX));
			SwayOffY = SwayMult * (Clamp((ZOffTrue + (DynSwayY.GetValue() / 60.0)), -MaxSwayY, MaxSwayY));	//clamping again because the fall anim is independent from the move and sway anims
			
			//get what it was last frame
			PrevAngle = CPlayer.mo.angle;
			PrevPitch = CPlayer.mo.pitch;
			OldSwayOffX = SwayOffX;
			OldSwayOffY = SwayOffY;
			PrevZ = CPlayer.mo.vel.Z;
		}
		else
		{
			SwayOffX = 0;
			SwayOffY = 0;
			OldSwayOffX = 0;
			OldSwayOffY = 0;
		}
		if(Cvar.GetCVar("helm_shake", CPlayer).GetInt())
		{
			if(CheckInventory("HelmShaker", 1))
			{
				ShakeOffsetX = frandom(-3, 3);
				ShakeOffsetY = frandom(-3, 3);
				BLCX = ShakeOffsetX;
				BLCY = ShakeOffsetY;
				BRCX = ShakeOffsetX;
				BRCY = ShakeOffsetY;
				TopX = ShakeOffsetX;
				TopY = ShakeOffsetY;
				GlassX = ShakeOffsetX;
				GlassY = ShakeOffsetY;
			}
			else
			{
				BLCX = (SwayOffX + OldSwayOffX) / 2;	// Average these two out to (help) prevent jitter
				BLCY = (SwayOffY + OldSwayOffY) / 2;
				BRCX = (SwayOffX + OldSwayOffX) / 2;
				BRCY = (SwayOffY + OldSwayOffY) / 2;
				TopX = (SwayOffX + OldSwayOffX) / 2;
				TopY = (SwayOffY + OldSwayOffY) / 2;
				TrueGlassX = (SwayOffX + OldSwayOffX) / 2;
				TrueGlassY = (SwayOffY + OldSwayOffY) / 2;
			}
		}

	}
		
	void DoGarbage()		// Generates the random strings that appear when the numbers glitch out. It's meant to look like it's outputting garbage data
	{
		Garbage1 = random(33,165);	//These numbers are the ASCII index for the character that's going to be printed
		Garbage2 = random(33,165);	//Fun fact: this code was originally a vile stack of switch/case statements
		Garbage3 = random(33,165);
///		Garbage1 = randompick(34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 64, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102);	//These numbers are the ASCII index for the character that's going to be printed
//		Garbage2 = randompick(34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 64, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102);	//Fun fact: this code was originally a vile stack of switch/case statements
//		Garbage3 = randompick(34, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 61, 64, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102);
	}
}