class Helmeter : BaseStatusBar
{
    // As with all ZScript classes, here you can
    // declare class fields, constants and such.
		double HelmetPosX;
		double HelmetPosY;
		double BLCX;
		double BLCY;
		double BRCX;
		double BRCY;
		double TopX;
		double TopY;
		double GlassX;
		double GlassY;
		double ShakeOffsetX;
		double ShakeOffsetY;
		int FlickerTics;
		double HelmLightLevel;
		double HelmetAlpha;
		int CrackCount;
//		double Crack1Alpha;
//		double Crack2Alpha;
//		DynamicValueInterpolator OffsetXInterp;
//		DynamicValueInterpolator OffsetYInterp;
		DynamicValueInterpolator HelmLightOutInterp;
		LinearValueInterpolator CrackAlphaInterp;
		double CrackAlpha;
		double CrackCVarAlpha;
		double HelmLightOut;
		bool Hurting;
//		double TrueBLCX;
//		double TrueBLCY;
//		double TrueBRCX;
//		double TrueBRCY;
//		double TrueTopX;
//		double TrueTopY;
		int ArmorProtection;
		int ArmorValue;
		int HealthPoints;
		int HPCol;
		int APCol;
		int AmmoLightStyle;
		int resLight;
		double msgscl;
		int priLight;
		bool locks[6];
		int HurtLevel;
		double BloodAlpha;
		int i;
		String image;
		double HealthIconAlpha;
		double OverhealthAlpha;
		double ArmorIconAlpha;
		double MegaArmorAlpha;
//		int MaxHP;
		double DisplayFlicker;
		double HudBackAlpha;
		double HelmLightFlicker;
		double HLFlickerTrue;
		bool AmmoExtra1;
		int AmmoExtra2;
		HUDFont mIndexFont;
		HUDFont mHudFont;
		HUDFont enlFont;
		Inventory ammotype1, ammotype2;
		DynamicValueInterpolator WarnFlashInterp;
		DynamicValueInterpolator HPInterp;
		DynamicValueInterpolator APInterp;
		double WarnFlash;
		const PICKUPMSG_SCROLLTIME = 15; //when new messages are added, the list will scroll for this many tics
		array<String> pickupMsgStrings; //this will contain every message as it's received
		array<double> pickupMsgAlpha; //this will track the alpha value for each message to fade them out
		double pickupMsgScrollTics; //this timer will be updated as new messages appear

		
    override void Init()
    {
		Super.Init();
		HelmetPosX = 0;
		HelmetPosY = 0;
		BLCX = 0;
		BLCY = 0;
		BRCX = 0;
		BRCY = 0;
		TopX = 0;
		TopY = 0;
		GlassX = 0;
		GlassY = 0;
		ShakeOffsetX = 0;
		ShakeOffsetY = 0;
		msgscl = 0.75;
		Hurting = false;
//		TrueBLCX = 0;
//		TrueBLCY = 0;
//		TrueBRCX = 0;
//		TrueBRCY = 0;
//		TrueTopX = 0;
//		TrueTopY = 0;
		ArmorValue = 0;
		FlickerTics = 100;
		OverhealthAlpha = 0;
		DisplayFlicker = 1.0;
		HelmLightFlicker = 1.0;
		HelmLightOutInterp = DynamicValueInterpolator.Create(100, 0.05, 1, 10);
		HelmLightOut = 0;
//		int maxHP = CPlayer.mo.GetMaxHealth(true);
		HealthPoints = 100;
//		Crack1Alpha = 1.0;
//		Crack2Alpha = 1.0;
		CrackAlphaInterp = LinearValueInterpolator.Create(100, 1);
		CrackAlpha = 1;
		WarnFlashInterp = DynamicValueInterpolator.Create(80, 0.1, 1, 10);
		WarnFlash = 1.0;
		AmmoExtra1 = false;
		HelmLightLevel = 1.0;
		AmmoExtra2 = 0;
		HurtLevel = 0;
		BloodAlpha = 0.75;
		HPInterp = DynamicValueInterpolator.Create(500, 0.1, 1, 50);
		APInterp = DynamicValueInterpolator.Create(500, 0.1, 1, 50);
		Font fnt = "04FONT"; //obtain the font named "MYHUDFNT"
        mIndexFont = HUDFont.Create(fnt);
		Font fnt2 = "04FONTOL"; //obtain the font named "MYHUDFNT"
        mHudFont = HUDFont.Create(fnt2);
		Font fnt3 = "cyberfnt"; //obtain the font named "MYHUDFNT"
        enlFont = HUDFont.Create(fnt3);
//		Font fnt4 = "BOLO"; //obtain the font named "MYHUDFNT"
 //       enlFont = HUDFont.Create(fnt4);
//		OffsetXInterp;
        // This function is called once, when the
        // HUD is first created. Here you can
        // define various default values.
        // For example, HUD fonts are commonly
        // created here.
    }

    override void Draw(int state, double ticFrac)
    {
		super.Draw(state, TicFrac);

		if (state == HUD_None)
		{
			return;
		}

		if (state == HUD_StatusBar)
		{
			BeginHud();
			DrawFullscreenStuff();
			DrawCustomPickupMessage((TopX, TopY + 45), DI_SCREEN_CENTER_TOP | DI_TEXT_ALIGN_CENTER, msgscl);
			DrawHudNumberStuff();
		}
		if (state == HUD_Fullscreen)
		{
			BeginHud();
			DrawCustomPickupMessage((TopX, TopY + 45), DI_SCREEN_CENTER_TOP | DI_TEXT_ALIGN_CENTER, msgscl);
			DrawHudNumberStuff();
//			DrawMinmodeHudStuff();
		}		
		
    }
	void PlayerDamaged()
	{
		CrackAlphaInterp.Reset(100);
		CrackAlpha = 1;
		CrackCount++;
//		CPlayer.GiveInventory("CrackNumber");
//		CPlayer.ACS_NamedExecute("YesThisWorks", 0, 0, 0, 0);
	}

	void DrawFullscreenStuff()
	{
		if(CPlayer.Health <= 0)
		{
			DrawImage("VSRDCRK", (GlassX,GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, 1.0);
		}
		if(Cvar.GetCVar("helm_showcracks", CPlayer).GetInt())
		{
			if (CrackCount >= 1 && CPlayer.Health >= 1)
			{
				CrackCVarAlpha = CrackAlpha * Clamp(Cvar.GetCVar("helm_crackalpha", CPlayer).GetFloat(), 0, 1);
				if(CrackAlphaInterp.GetValue() == 0)
				{
					CrackCount = 0;
				}
				DrawImage("VSRCRK1", (GlassX - 20,GlassY - 10), DI_SCREEN_LEFT_TOP | DI_ITEM_LEFT_TOP, CrackCVarAlpha);
				if (CrackCount >= 4)
				{
					DrawImage("VSRCRK3", (GlassX - 20,GlassY), DI_SCREEN_CENTER_BOTTOM | DI_ITEM_CENTER, CrackCvarAlpha);
				} 
				if (CrackCount >= 3)
				{
					DrawImage("VSRCRK4", (GlassX + 60,GlassY - 80), DI_SCREEN_RIGHT_TOP | DI_ITEM_RIGHT_TOP, CrackCVarAlpha);
				} 
				if (CrackCount >= 2)	
				{		//This one is drawn after the others so if they overlap it doesn't look as bad
					DrawImage("VSRCRK2", (GlassX + 10,GlassY + 50), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT_BOTTOM, CrackCVarAlpha);
				} 

			}
		}
//		if (CheckInventory("CrackNumber", 1))
//		{
//			DrawImage("VSRCRK1", (GlassX,GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, Crack1Alpha);
//			if (CheckInventory("CrackNumber", 2))
//			{
//				DrawImage("VSRCRK2", (GlassX,GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, Crack2Alpha);
//			} 
//		}
/*
		if(Cvar.GetCVar("helm_showdisplay", CPlayer).GetInt())
		{
			if (CrackCount >= 1 && ArmorValue <= 5)
			{
				DrawString(mIndexFont, "INSUFFICIENT ARMOR TO REPAIR DAMAGE", (TopX, TopY + 15), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_RED, Alpha: DisplayFlicker, scale: (0.75, 0.75));
			}
		}
*/
		HelmetAlpha = Clamp(Cvar.GetCVar("helm_helmetalpha", CPlayer).GetFloat(), 0, 1);
		HLFlickerTrue = HelmLightFlicker * Clamp(Cvar.GetCVar("helm_armoralpha", CPlayer).GetFloat(), 0, 1);
		DrawImage("VSRBLC", (BLCX - 10, BLCY + 10), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HelmetAlpha);
		DrawImage("VSRBRC", (BRCX + 10, BRCY + 10), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HelmetAlpha);
		DrawImage("VSRTPC", (TopX, TopY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HelmetAlpha);
		if(Cvar.GetCVar("helm_darkness", CPlayer).GetInt())
		{
			HelmLightLevel = HelmetAlpha * (cplayer.mo.cursector.lightlevel / 255.0);
			DrawImage("VSRBLB", (BLCX - 10, BLCY + 10), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HelmetAlpha);
			DrawImage("VSRBRB", (BRCX + 10, BRCY + 10), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HelmetAlpha);
			DrawImage("VSRTPB", (TopX, TopY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HelmetAlpha);
			DrawImage("VSRBLA", (BLCX - 10, BLCY + 10), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HelmLightLevel);
			DrawImage("VSRBRA", (BRCX + 10, BRCY + 10), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HelmLightLevel);
			DrawImage("VSRTPA", (TopX, TopY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HelmLightLevel);	
		}
		else
		{
			DrawImage("VSRBLA", (BLCX - 10, BLCY + 10), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HelmetAlpha);
			DrawImage("VSRBRA", (BRCX + 10, BRCY + 10), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HelmetAlpha);
			DrawImage("VSRTPA", (TopX, TopY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HelmetAlpha);
		}
//		if(Cvar.GetCVar("helm_projectlight", CPlayer).GetInt())
//		{
//			DrawImage("VDSPLIA", (BLCX - 1, BLCY - 18), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, DisplayFlicker);
//			DrawImage("VDSPLIA", (BRCX + 3, BRCY - 18), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, DisplayFlicker);
//		}
		if(ArmorValue >= 1 && Cvar.GetCVar("helm_armorlay", CPlayer).GetInt())		// sorry about the YandereDev ass coding, not sure how I could adapt this into switch/case
		{
			if(ArmorValue <= 25)
			{
				DrawImage("VSLBLA", (BLCX - 10, BLCY + 10), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HLFlickerTrue, (-1, -1), (1,1), STYLE_Add);
				DrawImage("VSLBRA", (BRCX + 10, BRCY + 10), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HLFlickerTrue, (-1, -1), (1,1), STYLE_Add);
				DrawImage("VSLTPA", (TopX, TopY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HLFlickerTrue, (-1, -1), (1,1), STYLE_Add);
			}
			else if (ArmorValue >=26 && ArmorValue <= 50)
			{
				DrawImage("VSLBLB", (BLCX - 10, BLCY + 10), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HLFlickerTrue, (-1, -1), (1,1), STYLE_Add);
				DrawImage("VSLBRB", (BRCX + 10, BRCY + 10), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HLFlickerTrue, (-1, -1), (1,1), STYLE_Add);
				DrawImage("VSLTPB", (TopX, TopY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HLFlickerTrue, (-1, -1), (1,1), STYLE_Add);
			}
			else if (ArmorValue >=51 && ArmorValue <= 100)
			{
				DrawImage("VSLBLC", (BLCX - 10, BLCY + 10), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HLFlickerTrue, (-1, -1), (1,1), STYLE_Add);
				DrawImage("VSLBRC", (BRCX + 10, BRCY + 10), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HLFlickerTrue, (-1, -1), (1,1), STYLE_Add);
				DrawImage("VSLTPC", (TopX, TopY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HLFlickerTrue, (-1, -1), (1,1), STYLE_Add);			
			}
			else if (ArmorValue >=101 && ArmorValue <= 150)
			{
				DrawImage("VSLBLD", (BLCX - 10, BLCY + 10), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HLFlickerTrue, (-1, -1), (1,1), STYLE_Add);
				DrawImage("VSLBRD", (BRCX + 10, BRCY + 10), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HLFlickerTrue, (-1, -1), (1,1), STYLE_Add);
				DrawImage("VSLTPD", (TopX, TopY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HLFlickerTrue, (-1, -1), (1,1), STYLE_Add);
			}
			else if (ArmorValue >=151)
			{
				DrawImage("VSLBLE", (BLCX - 10, BLCY + 10), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HLFlickerTrue, (-1, -1), (1,1), STYLE_Add);
				DrawImage("VSLBRE", (BRCX + 10, BRCY + 10), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HLFlickerTrue, (-1, -1), (1,1), STYLE_Add);
				DrawImage("VSLTPE", (TopX, TopY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HLFlickerTrue, (-1, -1), (1,1), STYLE_Add);
			}
		}
		if(Cvar.GetCVar("helm_blood", CPlayer).GetInt())
		{
			HurtLevel = (HealthPoints + 15) / 15;
			BloodAlpha = Clamp(Cvar.GetCVar("helm_bloodalpha", CPlayer).GetFloat(), 0, 1);
//			DrawString(enlFont, FormatNumber(HurtLevel, 1, 4), (TopX - 1, TopY + 59), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);
			switch(HurtLevel)
			{
			case 6:
				DrawImage("VSBLD6", (GlassX, GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, BloodAlpha);
				break;
			case 5:
				DrawImage("VSBLD6", (GlassX, GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, BloodAlpha);
				DrawImage("VSBLD5", (GlassX, GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, BloodAlpha);
				break;
			case 4:
				DrawImage("VSBLD6", (GlassX, GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, BloodAlpha);
				DrawImage("VSBLD5", (GlassX, GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, BloodAlpha);
				DrawImage("VSBLD4", (GlassX + 30, GlassY - 30), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT_BOTTOM, BloodAlpha);
				break;
			case 3:
				DrawImage("VSBLD6", (GlassX, GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, BloodAlpha);
				DrawImage("VSBLD5", (GlassX, GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, BloodAlpha);
				DrawImage("VSBLD4", (GlassX + 30, GlassY - 30), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT_BOTTOM, BloodAlpha);
				DrawImage("VSBLD3", (GlassX, GlassY - 20), DI_SCREEN_CENTER_BOTTOM | DI_ITEM_CENTER | DI_ITEM_BOTTOM, BloodAlpha);
				break;
			case 2:
				DrawImage("VSBLD6", (GlassX, GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, BloodAlpha);
				DrawImage("VSBLD5", (GlassX, GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, BloodAlpha);
				DrawImage("VSBLD4", (GlassX + 30, GlassY - 30), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT_BOTTOM, BloodAlpha);
				DrawImage("VSBLD3", (GlassX, GlassY - 20), DI_SCREEN_CENTER_BOTTOM | DI_ITEM_CENTER | DI_ITEM_BOTTOM, BloodAlpha);
				DrawImage("VSBLD2", (GlassX - 20, GlassY - 30), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_BOTTOM, BloodAlpha);
				break;
			case 1:
				DrawImage("VSBLD6", (GlassX, GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, BloodAlpha);
				DrawImage("VSBLD5", (GlassX, GlassY), DI_SCREEN_CENTER | DI_ITEM_CENTER, BloodAlpha);
				DrawImage("VSBLD4", (GlassX + 30, GlassY - 30), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT_BOTTOM, BloodAlpha);
				DrawImage("VSBLD3", (GlassX, GlassY - 20), DI_SCREEN_CENTER_BOTTOM | DI_ITEM_CENTER | DI_ITEM_BOTTOM, BloodAlpha);
				DrawImage("VSBLD2", (GlassX - 20, GlassY - 30), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_BOTTOM, BloodAlpha);
				DrawImage("VSBLD1", (GlassX, GlassY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, BloodAlpha);
				break;
			}
		}
	}
		

	override bool ProcessNotify(EPrintLevel printlevel, String outline)
	{
		if(gamestate != GS_LEVEL || consoleState == c_down) return false;		// if console is open or not in level, do not engage
		if ((printlevel >= PRINT_LOW || printlevel < PRINT_LOG) && Cvar.GetCVar("helm_customlog", CPlayer).GetInt()) // if not a pickup, death, critical, or chat message, or if this feature is disabled, stop
		{
			// When a new message appears, push it to our
			// array of strings:
			pickupMsgStrings.Push(outline);
			// We'll also push 2.0 to the alpha value for
			// this new string. We start with 2.0, so that
			// the message is printed opaque first, then
			// gradually starts fading out:
			pickupMsgAlpha.Push(2.0);
			// To be absolutely safe, make sure the two arrays
			// are of the same size:
			pickupMsgAlpha.Resize(pickupMsgStrings.Size());
			// Update the scroll timer:
			pickupMsgScrollTics = PICKUPMSG_SCROLLTIME;
			// Disable default pickup message printing:
			return true;
		}
		return false;
	}
	
	void DrawHudNumberStuff()
	{
		msgscl = Clamp(Cvar.GetCVar("helm_msgscl", CPlayer).GetFloat(), 0, 1);
		if(Cvar.GetCVar("helm_flicker", CPlayer).GetInt() && CPlayer.Health >= 1)
		{
			if(CheckInventory("Ouchies", 1))
			{
				HelmLightFlicker = frandom((ArmorValue / 200.0), 1.0);
			}
			else if(CheckInventory("OuchMore", 1))
			{
				HelmLightFlicker = frandom((ArmorValue / 200.0), 1.0);		//the lower armor you have, the more intense the flicker is
				DisplayFlicker = frandom(0.67, 1.0);
			}
			else
			{
				if(ArmorValue <= 5)
				{
					HelmLightFlicker = frandom(0.75, 1.0);	
				}
				else
				{
					HelmLightFlicker = 1.0;
				}
				DisplayFlicker = 1.0;
			}
		}	
		if(CPlayer.Health <= 0)
		{
			if(FlickerTics > 0)
			{
				if(Cvar.GetCVar("helm_flicker", CPlayer).GetInt())
				{
					HelmLightFlicker = frandom(((FlickerTics / 100.0) * 2), 1.0);
					DisplayFlicker = frandom(((FlickerTics / 100.0) * 2), 1.0);
				}
			}
			else
			{
				HelmLightOutInterp.Update(0);
	//			HelmLightOut = HelmLightOutInterp;
				if(Cvar.GetCVar("helm_flicker", CPlayer).GetInt())
				{
					HelmLightFlicker = frandom(0.0, (HelmLightOutInterp.GetValue() / 100.0));
					DisplayFlicker = frandom(0.0, (HelmLightOutInterp.GetValue() / 100.0));
				}
				else
				{
					HelmLightFlicker = HelmLightOutInterp.GetValue() / 100.0;
					DisplayFlicker = HelmLightOutInterp.GetValue() / 100.0;
				}
			}
		}
		if(Cvar.GetCVar("helm_shake", CPlayer).GetInt())
		{
			if(CheckInventory("HelmShaker", 1))
			{
				ShakeOffsetX = frandom(-3, 3);
				ShakeOffsetY = frandom(-3, 3);
				BLCX = ShakeOffsetX;
				BLCY = ShakeOffsetY;
				BRCX = ShakeOffsetX;
				BRCY = ShakeOffsetY;
				TopX = ShakeOffsetX;
				TopY = ShakeOffsetY;
				GlassX = ShakeOffsetX;
				GlassY = ShakeOffsetY;
			}
			else
			{
				BLCX = 0;
				BLCY = 0;
				BRCX = 0;
				BRCY = 0;
				TopX = 0;
				TopY = 0;
				GlassX = 0;
				GlassY = 0;
			}
		}
		
		if(Cvar.GetCVar("helm_showdisplay", CPlayer).GetInt())
		{
			HudBackAlpha = DisplayFlicker * Clamp(Cvar.GetCVar("helm_backalpha", CPlayer).GetFloat(), 0, 1);
			if(Cvar.GetCVar("helm_showmugshot", CPlayer).GetInt())
			{
				DrawImage("PHMUGBK", (BLCX + 40, BLCY - 100.5), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_CENTER, HudBackAlpha);
				DrawTexture(GetMugShot(5), (BLCX + 40, BLCY - 100.5), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_CENTER, DisplayFlicker);
			}
			if(HealthPoints <= 25)			// start flashing at 25%
			{
				DrawImage("PHWARNL", (BRCX + 68, BRCY - 60), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, WarnFlash);
			}
			DrawImage("PHBARBKH", (BLCX + 25, BLCY - 45), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, HudBackAlpha);
			DrawImage("HPICON", (BLCX + 49, BLCY - 71), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, HealthIconAlpha);
			if(Cvar.GetCVar("helm_showchips", CPlayer).GetInt())
			{
				DrawBar("PHBARHP5", "PHBARHP2", HPInterp.GetValue() / 5, 100, (BLCX + 43, BLCY - 57), 0, SHADER_HORZ, DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_TOP, DisplayFlicker);
			}
			DrawBar("PHBARHP", "PHBARHP2", HealthPoints, 100, (BLCX + 43, BLCY - 57), 0, SHADER_HORZ, DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_TOP, DisplayFlicker);
			if(CheckInventory("PowerStrength", 1))
			{
				DrawImage("BERZIND", (BLCX + 49, BLCY - 71), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
	//			DrawImage("PHBRZKIN", (BLCX + 30, BLCY - 45), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
			}
			if(HealthPoints >= 101)
			{
				DrawBar("PHBARHP3", "PHBARHP4", (HealthPoints - 100), 100, (BLCX + 43, BLCY - 57), 0, SHADER_VERT | SHADER_REVERSE, DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_TOP, DisplayFlicker);
				DrawImage("HPICON2", (BLCX + 49, BLCY - 71), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, OverhealthAlpha);
			}
			DrawString(mHUDFont, "000", (BLCX + 110, BLCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_LEFT_BOTTOM, Font.CR_DarkGray, Alpha: (HudBackAlpha / 2), scale: (1.5, 1.5));		
			DrawString(mHUDFont, FormatNumber(HealthPoints, 1, 4), (BLCX + 110, BLCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_LEFT_BOTTOM, HPCol, Alpha: DisplayFlicker, scale: (1.5, 1.5));
			/// ARMOR
			if(ArmorValue >= 1 && ArmorValue <= 25)			// start flashing at 25%, but don't flash if you have none
			{
				DrawImage("PHWARNL", (BRCX + 81, BRCY - 23), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, WarnFlash);
			}
			DrawImage("PHBARBKA", (BLCX + 38, BLCY - 8), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, HudBackAlpha);
			DrawImage("APICON", (BLCX + 62, BLCY - 34), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, ArmorIconAlpha);
			if(Cvar.GetCVar("helm_showchips", CPlayer).GetInt())
			{
				DrawBar("PHBARAP5", "PHBARAP2", APInterp.GetValue() / 5, 100, (BLCX + 56, BLCY - 20), 0, SHADER_HORZ, DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_TOP, DisplayFlicker);
			}
			DrawBar("PHBARAP", "PHBARAP2", ArmorValue, 100, (BLCX + 56, BLCY - 20), 0, SHADER_HORZ, DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_TOP, DisplayFlicker);
			if(ArmorValue >= 101)
			{
				DrawImage("APICON2", (BLCX + 62, BLCY - 34), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, MegaArmorAlpha);
				DrawBar("PHBARAP3", "PHBARAP4", (ArmorValue - 100), 100, (BLCX + 56, BLCY - 20), 0, SHADER_VERT | SHADER_REVERSE, DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT_TOP, DisplayFlicker);
			}
			if(ArmorValue >= 1)
			{
				DrawString(mIndexFont, FormatNumber(ArmorProtection, 1, 4), (BLCX + 61.5, BLCY - 38), DI_TEXT_ALIGN_CENTER | DI_SCREEN_LEFT_BOTTOM, font.CR_WHITE, Alpha: DisplayFlicker, scale: (0.80, 0.8));
			}
			DrawString(mHUDFont, "000", (BLCX + 123, BLCY - 43), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_LEFT_BOTTOM, font.CR_DarkGray, Alpha: (HudBackAlpha / 2), scale: (1.5, 1.5));
			DrawString(mHUDFont, FormatNumber(ArmorValue, 1, 4), (BLCX + 123, BLCY - 43), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_LEFT_BOTTOM, APCol, Alpha: DisplayFlicker, scale: (1.5, 1.5));
			/// AMMO
			if(Cvar.GetCVar("helm_swapammo", CPlayer).GetInt())
			{
				if(ammotype2 != null)
				{
					if(ammotype1 == null)
					{
						if(ammotype2.Amount <= (ammotype2.MaxAmount / 10))
						{
							DrawImage("PHWARNR", (BRCX - 68, BRCY - 60), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, WarnFlash);
						}
					}
					else if(ammotype2.Amount <= (ammotype2.MaxAmount / 4))
					{
						DrawImage("PHWARNR", (BRCX - 68, BRCY - 60), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, WarnFlash);
					}
					DrawImage("PHBARBKM", (BLCX - 25, BLCY - 45), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, HudBackAlpha);
					DrawImage("MGICON", (BLCX - 49, BLCY - 71), DI_ITEM_CENTER | DI_SCREEN_RIGHT_BOTTOM, DisplayFlicker);
					DrawBar("PHBARMG", "PHBARMG2", ammotype2.Amount, ammotype2.MaxAmount, (BLCX - 43, BLCY - 57), 0, SHADER_HORZ | SHADER_REVERSE, DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT_TOP, DisplayFlicker);
					DrawString(mHUDFont, "000", (BLCX - 71, BLCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_DarkGray, Alpha: (HudBackAlpha / 2), scale: (1.5, 1.5));		
					DrawString(mHUDFont, FormatNumber(ammotype2.Amount, 1, 4), (BLCX - 71, BLCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_Gold, Alpha: DisplayFlicker, scale: (1.5, 1.5));
					priLight = 2;
				}
				else prilight = 0;
				if(ammotype1 != null)
				{
					if(ammotype1.Amount <= (ammotype1.MaxAmount / 10))
					{
						DrawImage("PHWARNR", (BRCX - 81, BRCY - 23), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, WarnFlash);
					}
					DrawImage("PHBARBKR", (BLCX - 38, BLCY - 8), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, HudBackAlpha);
					DrawImage("RSICON", (BLCX - 62, BLCY - 34), DI_ITEM_CENTER | DI_SCREEN_RIGHT_BOTTOM, DisplayFlicker);
					DrawBar("PHBARRS", "PHBARRS2", ammotype1.Amount, ammotype1.MaxAmount, (BLCX - 56, BLCY - 20), 0, SHADER_HORZ | SHADER_REVERSE, DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT_TOP, DisplayFlicker);
					DrawString(mHUDFont, "000", (BLCX - 84, BLCY - 43), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, font.CR_DarkGray, Alpha: (HudBackAlpha / 2), scale: (1.5, 1.5));
					DrawString(mHUDFont, FormatNumber(ammotype1.Amount, 1, 4), (BLCX - 84, BLCY - 43), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_Yellow, Alpha: DisplayFlicker, scale: (1.5, 1.5));
					reslight = 1;
				}
				else reslight = 0;
			}
			else
			{
				if(ammotype1 != null)
				{
					if(ammotype2 == null)		//if weapon does not use a magazine and feeds directly from reserve, function like the reseve ammo counter
					{
						if(ammotype1.Amount <= (ammotype1.MaxAmount / 10))
						{
							DrawImage("PHWARNR", (BRCX - 68, BRCY - 60), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, WarnFlash);
						}
					}
					else if(ammotype1.Amount <= (ammotype1.MaxAmount / 4))		// else start flashing at 25%
					{
							DrawImage("PHWARNR", (BRCX - 68, BRCY - 60), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, WarnFlash);
					}
					DrawImage("PHBARBKM", (BLCX - 25, BRCY - 45), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, HudBackAlpha);
					DrawImage("MGICON", (BLCX - 49, BRCY - 71), DI_ITEM_CENTER | DI_SCREEN_RIGHT_BOTTOM, DisplayFlicker);
					DrawBar("PHBARMG", "PHBARMG2", ammotype1.Amount, ammotype1.MaxAmount, (BRCX - 43, BRCY - 57), 0, SHADER_HORZ | SHADER_REVERSE, DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT_TOP, DisplayFlicker);
					DrawString(mHUDFont, "000", (BRCX - 71, BRCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_DarkGray, Alpha: (HudBackAlpha / 2), scale: (1.5, 1.5));		
					DrawString(mHUDFont, FormatNumber(ammotype1.Amount, 1, 4), (BRCX - 71, BRCY - 80), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_Gold, Alpha: DisplayFlicker, scale: (1.5, 1.5));
					priLight = 2;
				}
				else priLight = 0;
				if(ammotype2 != null)
				{
					if(ammotype2.Amount <= (ammotype2.MaxAmount / 10))			// start flashing at 10%
					{
						DrawImage("PHWARNR", (BRCX - 81, BRCY - 23), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, WarnFlash);
					}
					DrawImage("PHBARBKR", (BRCX - 38, BRCY - 8), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, HudBackAlpha);
					DrawImage("RSICON", (BRCX - 62, BRCY - 34), DI_ITEM_CENTER | DI_SCREEN_RIGHT_BOTTOM, DisplayFlicker);
					DrawBar("PHBARRS", "PHBARRS2", ammotype2.Amount, ammotype2.MaxAmount, (BRCX - 56, BRCY - 20), 0, SHADER_HORZ | SHADER_REVERSE, DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT_TOP, DisplayFlicker);
					DrawString(mHUDFont, "000", (BRCX - 84, BRCY - 43), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, font.CR_DarkGray, Alpha: (HudBackAlpha / 2), scale: (1.5, 1.5));
					DrawString(mHUDFont, FormatNumber(ammotype2.Amount, 1, 4), (BRCX - 84, BRCY - 43), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_Yellow, Alpha: DisplayFlicker, scale: (1.5, 1.5));
					resLight = 1;
				}
				else resLight = 0;
			}
			/// OTHER MOD STUFF
			// Brutal Doom v22 & any other mods that use the same actor names
			if(CheckInventory("IGotNades", 1))
			{
				AmmoExtra1 = true;
				AmmoExtra2 = -1;	
				int NumNades = GetAmount("DummyGrenadeAmmo");
				if((ammotype1 == null && !Cvar.GetCVar("helm_swapammo", CPlayer).GetInt()) || (ammotype2 == null && Cvar.GetCVar("helm_swapammo", CPlayer).GetInt()))
				{
					DrawImage("PHGRNBK2", (BRCX - 19, BRCY - 82), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, HudBackAlpha);
				}
				else
				{
					DrawImage("PHGRNBK", (BRCX - 19, BRCY - 82), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, HudBackAlpha);
				}
				DrawImage("PHGRNBK3", (BRCX - 19, BRCY - 82), DI_ITEM_RIGHT_BOTTOM | DI_SCREEN_RIGHT_BOTTOM, DisplayFlicker);
				DrawString(enlFont, FormatNumber(NumNades, 1, 4), (BRCX - 43, BRCY - 91.5), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_RIGHT_BOTTOM, Font.CR_DarkGreen, Alpha: DisplayFlicker, scale: (0.75, 0.75));
			
			}
			else
			{
				AmmoExtra1 = false;
				AmmoExtra2 = 1;
			}
			if(CheckInventory("ITactic", 1))
			{
				DrawImage("PHSTMBK", (BLCX + 113, BLCY - 8), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, HudBackAlpha);
				DrawImage("PHSTMIC", (BLCX + 113, BLCY - 8), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
				DrawBar("PSTMBR1", "PSTMBR2", (100 - GetAmount("DummyStamina")), 100, (BLCX + 115, BLCY - 18), 0, SHADER_VERT | SHADER_REVERSE, DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
			}
			/// LEVEL STATS
//			DrawString(mIndexFont, "TIME", (TopX, TopY + 12), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker, scale: (0.5, 0.5));
			if(Cvar.GetCVar("helm_showstats", CPlayer).GetInt())
			{
				DrawImage("PHSTABK", (TopX, TopY + 7), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HudBackAlpha);
				DrawString(enlFont, "K: "..level.killed_monsters.."/"..level.total_monsters, (TopX - 75, TopY + 13), DI_TEXT_ALIGN_LEFT | DI_SCREEN_CENTER_TOP, Font.CR_GREY, Alpha: DisplayFlicker);
				DrawString(enlFont, "I: "..level.found_items.."/"..level.total_items, (TopX - 66, TopY + 23), DI_TEXT_ALIGN_LEFT | DI_SCREEN_CENTER_TOP, Font.CR_GREEN, Alpha: DisplayFlicker);
				DrawString(enlFont, "S: "..level.found_secrets.."/"..level.total_secrets, (TopX + 75, TopY + 13), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_CENTER_TOP, Font.CR_LIGHTBLUE, Alpha: DisplayFlicker);
				DrawString(enlFont, level.TimeFormatted(), (TopX + 66, TopY + 23), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);
//				DrawString(enlFont, level.TimeFormatted(true), (TopX + 67, TopY + 19), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_CENTER_TOP, Font.CR_YELLOW, Alpha: DisplayFlicker);			
//				DrawString(enlFont, level.Mapname, (TopX - 1, TopY + 19), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);
	//			DrawString(enlFont, level.Levelname, (TopX, TopY + 23), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);
				/*
				DrawImage("PHSTABK", (TopX, TopY + 7), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HudBackAlpha);
				DrawString(enlFont, "K: "..level.killed_monsters.."/"..level.total_monsters, (TopX - 74, TopY + 10), DI_TEXT_ALIGN_LEFT | DI_SCREEN_CENTER_TOP, Font.CR_GREY, Alpha: DisplayFlicker);
				DrawString(enlFont, "I: "..level.found_items.."/"..level.total_items, (TopX - 67, TopY + 19), DI_TEXT_ALIGN_LEFT | DI_SCREEN_CENTER_TOP, Font.CR_GREEN, Alpha: DisplayFlicker);
				DrawString(enlFont, "S: "..level.found_secrets.."/"..level.total_secrets, (TopX - 60, TopY + 28), DI_TEXT_ALIGN_LEFT | DI_SCREEN_CENTER_TOP, Font.CR_LIGHTBLUE, Alpha: DisplayFlicker);
				DrawString(enlFont, level.TimeFormatted(), (TopX + 74, TopY + 10), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);
				DrawString(enlFont, level.TimeFormatted(true), (TopX + 67, TopY + 19), DI_TEXT_ALIGN_RIGHT | DI_SCREEN_CENTER_TOP, Font.CR_YELLOW, Alpha: DisplayFlicker);			
//				DrawString(enlFont, level.Mapname, (TopX - 1, TopY + 19), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);
	//			DrawString(enlFont, level.Levelname, (TopX, TopY + 23), DI_TEXT_ALIGN_CENTER | DI_SCREEN_CENTER_TOP, Font.CR_GOLD, Alpha: DisplayFlicker);
				*/
			}
			/// KEYS
			
			if(Cvar.GetCVar("helm_showmugshot", CPlayer).GetInt())		//if the mug is enabled the key panel moves and connects to it
			{
				DrawImage("PHK3YBK", (BLCX + 62, BLCY - 82), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, HudBackAlpha);

				//this code is pretty much just ripped from gzdoom.pk3 because I am not smart
				for (i = 0; i < 6; i++) locks[i] = CPlayer.mo.CheckKeys(i + 1, false, true);
				// key 1
				if (locks[1] && locks[4]) image = "STKEYS6";
				else if (locks[1]) image = "STKEYS0";
				else if (locks[4]) image = "STKEYS3";
				else image = "";
				DrawImage(image, (BLCX + 72.5, BLCY - 88.5), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
				// key 2
				if (locks[2] && locks[5]) image = "STKEYS7";
				else if (locks[2]) image = "STKEYS1";
				else if (locks[5]) image = "STKEYS4";
				else image = "";
				DrawImage(image, (BLCX + 82.5, BLCY - 88.5), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
				// key 3
				if (locks[0] && locks[3]) image = "STKEYS8";
				else if (locks[0]) image = "STKEYS2";
				else if (locks[3]) image = "STKEYS5";
				else image = "";
				DrawImage(image, (BLCX + 92.5, BLCY - 88.5), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
			}
			else
			{
				DrawImage("PHKEYBK", (BLCX + 21, BLCY - 82), DI_ITEM_LEFT_BOTTOM | DI_SCREEN_LEFT_BOTTOM, HudBackAlpha);
				for (i = 0; i < 6; i++) locks[i] = CPlayer.mo.CheckKeys(i + 1, false, true);
				// key 1
				if (locks[1] && locks[4]) image = "STKEYS6";
				else if (locks[1]) image = "STKEYS0";
				else if (locks[4]) image = "STKEYS3";
				else image = "";
				DrawImage(image, (BLCX + 36.5, BLCY - 88.5), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
				// key 2
				if (locks[2] && locks[5]) image = "STKEYS7";
				else if (locks[2]) image = "STKEYS1";
				else if (locks[5]) image = "STKEYS4";
				else image = "";
				DrawImage(image, (BLCX + 46.5, BLCY - 88.5), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
				// key 3
				if (locks[0] && locks[3]) image = "STKEYS8";
				else if (locks[0]) image = "STKEYS2";
				else if (locks[3]) image = "STKEYS5";
				else image = "";
				DrawImage(image, (BLCX + 56.5, BLCY - 88.5), DI_ITEM_CENTER | DI_SCREEN_LEFT_BOTTOM, DisplayFlicker);
			}
		}
		
		/// LIGHTS
		if(Cvar.GetCVar("helm_projectlight", CPlayer).GetInt())
		{
			DrawImage("VDSPLIA", (BLCX - 1, BLCY - 18), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, DisplayFlicker);
			DrawImage("VDSPLIA", (BRCX + 3, BRCY - 18), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, DisplayFlicker);
			DrawImage("VDSPLIA", (TopX - 98, TopY - 13), DI_SCREEN_CENTER_TOP | DI_ITEM_RIGHT | DI_ITEM_TOP, DisplayFlicker);
			DrawImage("VDSPLIA", (TopX + 100, TopY - 13), DI_SCREEN_CENTER_TOP | DI_ITEM_LEFT | DI_ITEM_TOP, DisplayFlicker);
			if(Cvar.GetCVar("helm_showdisplay", CPlayer).GetInt())
			{
				DrawImage("VDSPLIB", (BLCX - 1, BLCY - 18), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, DisplayFlicker, (-1, -1), (1,1), STYLE_Add);
				if(ammotype1 != null || ammotype2 != null)
				{
					DrawImage("VDSPLIB", (BRCX + 3, BRCY - 18), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, DisplayFlicker, (-1, -1), (1,1), STYLE_Add);
				}
				else
				{
					DrawImage("VDSPLIC", (BRCX + 3, BRCY - 18), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, DisplayFlicker, (-1, -1), (1,1), STYLE_Add);
				}
				if(Cvar.GetCVar("helm_showstats", CPlayer).GetInt())
				{
					DrawImage("VDSPLIB", (TopX - 98, TopY - 13), DI_SCREEN_CENTER_TOP | DI_ITEM_RIGHT | DI_ITEM_TOP, DisplayFlicker);
					DrawImage("VDSPLIB", (TopX + 100, TopY - 13), DI_SCREEN_CENTER_TOP | DI_ITEM_LEFT | DI_ITEM_TOP, DisplayFlicker);
				}
				else
				{
					DrawImage("VDSPLIC", (TopX - 98, TopY - 13), DI_SCREEN_CENTER_TOP | DI_ITEM_RIGHT | DI_ITEM_TOP, DisplayFlicker);
					DrawImage("VDSPLIC", (TopX + 100, TopY - 13), DI_SCREEN_CENTER_TOP | DI_ITEM_LEFT | DI_ITEM_TOP, DisplayFlicker);
				}
				if(Cvar.GetCVar("helm_projectbeam", CPlayer).GetInt())
				{
					if(Cvar.GetCVar("helm_showmugshot", CPlayer).GetInt())
					{
						DrawImage("VDSPLLA", (BLCX, BLCY), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HudBackAlpha);
					}
					else
					{
						DrawImage("VDSPLLB", (BLCX, BLCY), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, HudBackAlpha);
					}
		//			DrawImage("VDSPLID", (BRCX, BRCY), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, DisplayFlicker);
//					if((ammotype1 == null && ammotype2 == null) && AmmoExtra1 == true)
//					{
//						DrawImage("VDSPLRF", (BRCX, BRCY), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HudBackAlpha);
//					}
					AmmoLightStyle = (resLight + priLight) * AmmoExtra2;
					switch(AmmoLightStyle)
					{
					case 0:
						break;
					case 1:
						DrawImage("VDSPLRG", (BRCX, BRCY), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HudBackAlpha);
						break;
					case 2:
						DrawImage("VDSPLRD", (BRCX, BRCY), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HudBackAlpha);
						break;
					case 3:
						DrawImage("VDSPLRC", (BRCX, BRCY), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HudBackAlpha);
						break;
					case -1:
						DrawImage("VDSPLRG", (BRCX, BRCY), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HudBackAlpha);
						DrawImage("VDSPLRF", (BRCX, BRCY), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HudBackAlpha);						
						break;
					case -2:
						DrawImage("VDSPLRE", (BRCX, BRCY), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HudBackAlpha);
						break;
					case -3:
						DrawImage("VDSPLRB", (BRCX, BRCY), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HudBackAlpha);
						break;
					}
					if(AmmoLightStyle == 0 && AmmoExtra2 == -1)
					{
						DrawImage("VDSPLRF", (BRCX, BRCY), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, HudBackAlpha);						
					}
					if(Cvar.GetCVar("helm_showstats", CPlayer).GetInt())
					{
						DrawImage("VDSPLTA", (TopX, TopY - 10), DI_SCREEN_CENTER_TOP | DI_ITEM_CENTER | DI_ITEM_TOP, HudBackAlpha);
					}
				}
			}
			else
			{
				DrawImage("VDSPLIC", (BLCX - 1, BLCY - 18), DI_SCREEN_LEFT_BOTTOM | DI_ITEM_LEFT | DI_ITEM_BOTTOM, DisplayFlicker, (-1, -1), (1,1), STYLE_Add);
				DrawImage("VDSPLIC", (BRCX + 3, BRCY - 18), DI_SCREEN_RIGHT_BOTTOM | DI_ITEM_RIGHT | DI_ITEM_BOTTOM, DisplayFlicker, (-1, -1), (1,1), STYLE_Add);
				DrawImage("VDSPLIC", (TopX - 98, TopY - 13), DI_SCREEN_CENTER_TOP | DI_ITEM_RIGHT | DI_ITEM_TOP, DisplayFlicker);
				DrawImage("VDSPLIC", (TopX + 100, TopY - 13), DI_SCREEN_CENTER_TOP | DI_ITEM_LEFT | DI_ITEM_TOP, DisplayFlicker);
			}
		}
	}
	
    override void Tick()
    {
		Super.Tick();
		ArmorValue = GetArmorAmount();
		ArmorIconAlpha = (ArmorValue / 100.0) * DisplayFlicker;
		if (HealthPoints <= 0 && FlickerTics > 0)
		{
			FlickerTics--;
		}
		if (ArmorValue >= 1)
		{	
			ArmorProtection = GetArmorSavePercent();
		}
		if (ArmorValue >= 101)
		{	
			MegaArmorAlpha = ((ArmorValue - 100) / 100.0) * DisplayFlicker;
		}
		HealthPoints = CPlayer.Health;
		if((HPInterp.GetValue() / 5)!= HealthPoints)
		{
			HPInterp.Update(HealthPoints * 5);
		}
		if((APInterp.GetValue() / 5) != ArmorValue)
		{
			APInterp.Update(ArmorValue * 5);
		}
		[ammotype1, ammotype2] = GetCurrentAmmo();
		HealthIconAlpha = (HealthPoints / 100.0) * DisplayFlicker;
		if (HealthPoints >= 101)
		{
			HPCol = Font.CR_Fire;
			OverhealthAlpha = ((HealthPoints - 100) / 100.0) * DisplayFlicker;
		}
		else if (HealthPoints <= 25)
		{
			HPCol = Font.CR_DarkRed;
		}
		else
		{
			HPCol = Font.CR_Red;
		}
		if (ArmorValue >= 101)
		{
			APCol = Font.CR_Blue;
		}
		else
		{
			APCol = Font.CR_Green;
		}
		if(ArmorValue >= 6)
		{
			if(CrackCount >= 1 || CrackAlphaInterp.GetValue() >= 1)
			{
			CrackAlphaInterp.Update(0);
			CrackAlpha = CrackAlphaInterp.GetValue() / 100.0;
			}
		}
		if(Cvar.GetCVar("helm_warnflash", CPlayer).GetInt())
		{	
			if(WarnFlashInterp.GetValue() >= 21)
			{
				WarnFlashInterp.Update(20);
				WarnFlash = (WarnFlashInterp.GetValue() / 80.0) * DisplayFlicker;
			}
			else
			{
				WarnFlashInterp.Reset(100);
			}
		}
		else
		{
			WarnFlash = 0.0;
		}
		if (pickupMsgStrings.Size() > 0)
		{
			// Update the alpha values of each message.
			bool shouldclear = true;
			for (int i = 0; i < pickupMsgAlpha.Size(); i++)
			{
				if(HealthPoints > 0)
				{
					pickupMsgAlpha[i] = max(pickupMsgAlpha[i] - 0.025, 0.0);
				}
				if (pickupMsgAlpha[i] > 0)
				{
					// If at least a single message's alpha is
					// above zero, do not clear them.
					shouldclear = false;
				}
			}
			// If ALL messages' alpha is zero, clear arrays:
			if (shouldclear)
			{
				pickupMsgStrings.Clear();
				pickupMsgAlpha.Clear();
			}
			// Otherwise update scroll timer:
			else if (pickupMsgScrollTics > 0)
			{
				pickupMsgScrollTics--;
			}
		}
	}
	void DrawCustomPickupMessage(Vector2 pos, int flags, double scale = 1.0)
	{
		int msgcount = pickupMsgStrings.Size();
		if (msgcount <= 0) return;
		
		// Get the height of the font (we will use this for vertical
		// spacing):
		double stringHeight = enlFont.mFont.GetHeight() * scale;
		// If there's more than 1 message in the queue, offset each
		// message to create an effect of them scrolling:
//		if (msgcount > 1)
//		{
		pos.y -= stringheight * (double(pickupMsgScrollTics) / PICKUPMSG_SCROLLTIME);
//		}
		// Finally, draw all messages, starting from the newest one:
		for (int j = msgcount - 1; j >= 0; j--)
		{
			DrawString(enlFont, 
				pickupMsgStrings[j],
				pos,
				flags: flags,
				translation: Font.CR_White,
				// Pass the alpha value from the alpha values array.
				// Don't forget to clamp it  to 1.0 here, since it
				// starts at 2.0:
				alpha: (min(pickupMsgAlpha[j], 1.0)) * DisplayFlicker,
				scale: (scale, scale));
			// move up for the next message:
			pos.y += stringheight;
		}
	}
}

class PainHandler : EventHandler
{
//	bool Ouchies;
//	override void WorldLoaded(WorldEvent e)
//	{
//		Ouchies = false;
//		e.thing.A_TakeInventory("Ouchies", 1);
//	}
	override void WorldThingDamaged(WorldEvent e)
	{
		if (e.thing && e.thing is "PlayerPawn")
		{
			if ((e.DamageFlags == DMG_EXPLOSION && e.Damage > 5) || e.Damage >= 21)
			{
//				e.thing.A_GiveInventory("CrackNumber", 1);
				EventHandler.SendInterfaceEvent(e.thing.PlayerNumber(), "HUDEVENT_PlayerDamaged");
				e.thing.A_PlaySound("visorcrack", CHAN_AUTO, 0.8);
				e.thing.ACS_NamedExecute("helmquake", 0, 0, 0, 0);				// I know this could be better done but whatever
			}														// at least it's better than UDV using like 8000 ACS scripts
			else
			{
			e.thing.ACS_NamedExecute("ourch", 0, 0, 0, 0);	
			}
//			e.thing.A_GiveInventory("Ouchies", 1);
//			e.thing.A_TakeInventory("Ouchies", 1);
		}
	}
	override void InterfaceProcess(ConsoleEvent e)
    {
        // Detect when the above mentioned interface event
        // is triggered:
        if (e.name ~== "HUDEVENT_PlayerDamaged")
        {
            // Cast the current statusbar as our custom HUD:
            let hud = Helmeter(statusbar);
            if (hud)
            {
                // If the cast suceeded, call the custom PlayerDamaged
                // function, and pass the first argument of the interface
                // event (which is supposed to contain the amount of damage)
                // to its argument:
                hud.PlayerDamaged();
            }
        }
    }
//	override void WorldThingDied(WorldEvent e)
//	{
//		if (e.thing && e.thing is "PlayerPawn")
//		{
//			e.thing.A_GiveInventory("DeadCrack");
//		}
//	}	
}

	
class CrackNumber : Inventory
{
	Default
	{
		Inventory.MaxAmount 2;
	}
}
/*
class Crack1 : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}

class Crack2 : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}
*/

class Ouchies : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}

class OuchMore : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}

//class DeadCrack: Inventory
//{
//	Default
//	{
//		Inventory.MaxAmount 1;
//	}
//}
class IGotNades: Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}
class DummyGrenadeAmmo: Inventory
{
	Default
	{
		Inventory.MaxAmount 10;
	}
}
class ITactic: Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}
class DummyStamina: Inventory
{
	Default
	{
		Inventory.MaxAmount 100;
	}
}

class HelmShaker : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}
//*/